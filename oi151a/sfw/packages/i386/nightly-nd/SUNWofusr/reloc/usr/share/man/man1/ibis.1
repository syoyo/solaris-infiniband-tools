'\" t
.\"
.\" Modified for Solaris to to add the Solaris stability classification,
.\" and to add a note about source availability.
.\" 
.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IBIS 1"
.TH IBIS 1 "2006-06-06" "IBIS 1.0" "IB MANAGEMENT IN-BAND SERVICES PACKAGE"
.SH "NAME"
\&\fBibis\fR \- IB management Inband Services \- an extended TCL shell
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
ibis [\-port_num <port number to attach to>]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBibis\fR is a \s-1TCL\s0 shell extended with interface for sending and receiving \s-1IB\s0 management datagrams (\s-1MADS\s0).
To use this shell you will write \s-1TCL\s0 code that excersizes the regular \s-1TCL\s0 command and the special \s-1API\s0 provided by this extension. Interactive use is also possible and is greatly enhanced if tclreadline package is available on the machine.
.PP
The following sub sections provide detailed definition for the \s-1API\s0 and global objects defined by the extension. The different MADs APIs are group by the management class.
.SH "IBIS Constants"
.IX Header "IBIS Constants"
These constants are provided by \s-1IBIS:\s0 
.Sh "Log Verbosity Flags"
.IX Subsection "Log Verbosity Flags"
.ie n .IP "[ Constant : int  ] $IBIS_LOG_NONE = 0x00" 4
.el .IP "[ Constant : int  ] \f(CW$IBIS_LOG_NONE\fR = 0x00" 4
.IX Item "[ Constant : int  ] $IBIS_LOG_NONE = 0x00"
.PD 0
.ie n .IP "[ Constant : int  ] $IBIS_LOG_ERROR = 0x01" 4
.el .IP "[ Constant : int  ] \f(CW$IBIS_LOG_ERROR\fR = 0x01" 4
.IX Item "[ Constant : int  ] $IBIS_LOG_ERROR = 0x01"
.ie n .IP "[ Constant : int  ] $IBIS_LOG_INFO = 0x02" 4
.el .IP "[ Constant : int  ] \f(CW$IBIS_LOG_INFO\fR = 0x02" 4
.IX Item "[ Constant : int  ] $IBIS_LOG_INFO = 0x02"
.ie n .IP "[ Constant : int  ] $IBIS_LOG_VERBOSE = 0x04" 4
.el .IP "[ Constant : int  ] \f(CW$IBIS_LOG_VERBOSE\fR = 0x04" 4
.IX Item "[ Constant : int  ] $IBIS_LOG_VERBOSE = 0x04"
.ie n .IP "[ Constant : int  ] $IBIS_LOG_DEBUG = 0x08" 4
.el .IP "[ Constant : int  ] \f(CW$IBIS_LOG_DEBUG\fR = 0x08" 4
.IX Item "[ Constant : int  ] $IBIS_LOG_DEBUG = 0x08"
.ie n .IP "[ Constant : int  ] $IBIS_LOG_FUNCS = 0x10" 4
.el .IP "[ Constant : int  ] \f(CW$IBIS_LOG_FUNCS\fR = 0x10" 4
.IX Item "[ Constant : int  ] $IBIS_LOG_FUNCS = 0x10"
.ie n .IP "[ Constant : int  ] $IBIS_LOG_FRAMES = 0x20" 4
.el .IP "[ Constant : int  ] \f(CW$IBIS_LOG_FRAMES\fR = 0x20" 4
.IX Item "[ Constant : int  ] $IBIS_LOG_FRAMES = 0x20"
.PD
.SH "IBIS Functions"
.IX Header "IBIS Functions"
This section provide the details about the functions \s-1IBIS\s0 exposes.
They all return 0 on succes.
.IP "[return list] ibis_get_local_ports_info" 4
.IX Item "[return list] ibis_get_local_ports_info"
Return the list of available \s-1IB\s0 ports with \s-1GUID\s0, \s-1LID\s0, state and port number.
.IP "[ returns int  ] ibis_init" 4
.IX Item "[ returns int  ] ibis_init"
Initialize ibis object   
.IP "[ returns int  ] ibis_set_verbosity level" 4
.IX Item "[ returns int  ] ibis_set_verbosity level"
Change the log verbosity   
.IP "[ returns int  ] ibis_set_port guid" 4
.IX Item "[ returns int  ] ibis_set_port guid"
Set the port \s-1IBIS\s0 is attached to and initialize all sub packages.
Must be called once during ibis operation.
.IP "[ returns new_uint64_t  ] ibis_get_port" 4
.IX Item "[ returns new_uint64_t  ] ibis_get_port"
Provide the \s-1GUID\s0 of the port \s-1IBIS\s0 is attached to   
.IP "[ returns int  ] ibis_set_transaction_timeout timeout_ms" 4
.IX Item "[ returns int  ] ibis_set_transaction_timeout timeout_ms"
Set the transaction time out in [msec]   
.IP "[ returns int  ] ibis_exit" 4
.IX Item "[ returns int  ] ibis_exit"
Exit \s-1IBIS\s0.   
.IP "[ returns int  ] ibis_puts verbosity msg" 4
.IX Item "[ returns int  ] ibis_puts verbosity msg"
Appends a message to the OpenSM log   
.Sh "\s-1IBIS\s0 Options Object"
.IX Subsection "IBIS Options Object"
.RS 4
The \s-1IBIS\s0 options are available through the predefined object: ibis_opts.
It can be manipulated using the standard Tcl methods: cget and configure.
Examples: 
.Sp
.Vb 1
\&   ibis_opts cget -force_log_flush
.Ve
.Sp
.Vb 1
\&   ibis_opts configure -force_log_flush TRUE
.Ve
.Sp
The following are the different options that can be configured:
.RE
.IP "[ Member data: returns boolean_t * ] \-single_thread" 4
.IX Item "[ Member data: returns boolean_t * ] -single_thread"
Run single threaded   
.IP "[ Member data: returns boolean_t * ] \-force_log_flush" 4
.IX Item "[ Member data: returns boolean_t * ] -force_log_flush"
If \s-1TRUE\s0 \- forces flash after each log message (\s-1TRUE\s0).   
.IP "[ Member data: returns uint8_t * ] \-log_flags" 4
.IX Item "[ Member data: returns uint8_t * ] -log_flags"
The log levels to be used   
.IP "[ Member data: returns char * ] \-log_file" 4
.IX Item "[ Member data: returns char * ] -log_file"
The name of the log file to be used.Must be configured before \fBibis_init\fR
is used to make an affect
.IP "[ Member data: returns uint64_t * ] \-sm_key" 4
.IX Item "[ Member data: returns uint64_t * ] -sm_key"
The SM_Key to be used when sending SubnetMgt and SubnetAdmin MADs   
.IP "[ Member data: returns uint64_t * ] \-m_key" 4
.IX Item "[ Member data: returns uint64_t * ] -m_key"
The M_Key to be used when sending SubnetMgt   
.IP "[ Member data: returns uint64_t * ] \-v_key" 4
.IX Item "[ Member data: returns uint64_t * ] -v_key"
The Vendor Key to be used when sending Vendor Specific MADs.   
.SH "IBPM"
.IX Header "IBPM"
\&\s-1IBPM\s0 stands for \s-1IB\s0 Performance Monitoring MADs. \s-1IB\s0 provides standard facilities for tracking statistics on every port.
.Sp
This section provide the details about the functions \s-1IBPM\s0 exposes.
They all return 0 on succes.
.IP "[ returns int  ] pmMultiMaxGet" 4
.IX Item "[ returns int  ] pmMultiMaxGet"
Obtain the maximal number of parallel queries that can be sent
.IP "[ returns int  ] pmGetPortCounters lid port_select" 4
.IX Item "[ returns int  ] pmGetPortCounters lid port_select"
Send a \*(L"PortCounters\*(R" query to teh given \s-1LID\s0 and port
.IP "[ returns int  ] pmGetPortCountersMulti num lid_list port_select_list" 4
.IX Item "[ returns int  ] pmGetPortCountersMulti num lid_list port_select_list"
Send a batch of \*(L"PortCounters\*(R" queries to the given list of LIDs and ports.
num \- defines the number of elements in each list.
.IP "[ returns int  ] pmGetExtPortCountersMulti num lid_list port_select_list" 4
.IX Item "[ returns int  ] pmGetExtPortCountersMulti num lid_list port_select_list"
Send a batch of \*(L"ExtendedPortCounters\*(R" queries to the given list of LIDs and ports.
num \- defines the number of elements in each list.
.IP "[ returns int  ] pmClrAllCounters lid port_select" 4
.IX Item "[ returns int  ] pmClrAllCounters lid port_select"
Sends a command to \*(L"clear all counters\*(R" on the given \s-1LID\s0 and port
.IP "[ returns int  ] pmClrAllCountersMulti num lid_list port_select_list" 4
.IX Item "[ returns int  ] pmClrAllCountersMulti num lid_list port_select_list"
Send a batch of \*(L"clear all counters\*(R" commands to the given list of LIDs and ports.
num \- defines the number of elements in each list.
.SH "IBSAC"
.IX Header "IBSAC"
\&\s-1IBSAC\s0 stands for \s-1IB\s0 Subnet Administrator (\s-1SA\s0) Client. It provide means to query the \s-1SA\s0 for information about the various objects it manages
.Sp
The following sections describe the concepts behind the \s-1SAC\s0 interface and then provides detailed description of each attribute that can be queried.
.Sh "\s-1IBSAC\s0 Objects"
.IX Subsection "IBSAC Objects"
.RS 4
\&\s-1IBSAC\s0 uses predefined global objects to facilitate \s-1SA\s0 Queries.
Such objects are named sac<Attribute>Query. Each such object 
exposes a standard set of methods:
.RE
.IP "dump" 4
.IX Item "dump"
dump out all fields and values for the obejct
.IP "cget \-<field>:" 4
.IX Item "cget -<field>:"
obtain the value of the given field
.IP "configure \-<field> <value>:" 4
.IX Item "configure -<field> <value>:"
set the field value
.IP "get <comp mask>:" 4
.IX Item "get <comp mask>:"
query the \s-1SA\s0 for one record using the component mask and field values as set on the query object
.IP "getTable <comp mask>:" 4
.IX Item "getTable <comp mask>:"
query the \s-1SA\s0 for all records matching component mask and field values as set on the query object
.Sp
Some \s-1SA\s0 maintained objects support the \*(L"set\*(R" and \*(L"delete\*(R" methods. In that case the following methods are made available on the corresponding query object:
.IP "set <comp mask>:" 4
.IX Item "set <comp mask>:"
send a \fBset\fR method to the \s-1SA\s0 with the component mask and field values as set on the query object
.IP "delete <comp mask>:" 4
.IX Item "delete <comp mask>:"
send a \fBdelete\fR method to the \s-1SA\s0 with the component mask and field values as set on the query object
.Sh "Returned Objects"
.IX Subsection "Returned Objects"
This section describes the values returned from the get/getTable/set/delete methods of the query objects:
.Sp
Each query returns a list (or one) identifiers (pointers) for objects. There identifiers are formatted according to the type of object they point to using the following prefixes:
.Sp
Queries embedding Subnet Management Attributes:
.IP "ni:<idx>   = node info" 4
.IX Item "ni:<idx>   = node info"
.PD 0
.IP "nr:<idx>   = node info record (\s-1SA\s0 \s-1RID\s0 + node info)" 4
.IX Item "nr:<idx>   = node info record (SA RID + node info)"
.IP "pi:<idx>   = port info" 4
.IX Item "pi:<idx>   = port info"
.IP "pir:<idx>  = port info record (\s-1SA\s0 \s-1RID\s0 + port info)" 4
.IX Item "pir:<idx>  = port info record (SA RID + port info)"
.IP "smi:<idx>  = \s-1SM\s0 info" 4
.IX Item "smi:<idx>  = SM info"
.IP "smir:<idx> = \s-1SM\s0 info record (\s-1SA\s0 \s-1RID\s0 + \s-1SM\s0 info)" 4
.IX Item "smir:<idx> = SM info record (SA RID + SM info)"
.IP "swi:<idx>  = switch info" 4
.IX Item "swi:<idx>  = switch info"
.IP "swir:<idx> = switch info record (\s-1SA\s0 \s-1RID\s0 + switch info)" 4
.IX Item "swir:<idx> = switch info record (SA RID + switch info)"
.IP "slvt:<idx> = \s-1SL\s0 to \s-1VL\s0 table" 4
.IX Item "slvt:<idx> = SL to VL table"
.IP "slvr:<idx> = \s-1SL\s0 to \s-1VL\s0 table Record (\s-1SA\s0 \s-1RID\s0 + \s-1SL\s0 to \s-1VL\s0 table)" 4
.IX Item "slvr:<idx> = SL to VL table Record (SA RID + SL to VL table)"
.IP "pkt:<idx>  = PKey table" 4
.IX Item "pkt:<idx>  = PKey table"
.IP "pkr:<idx>  = PKey table record (\s-1SA\s0 \s-1RID\s0 + PKey table)" 4
.IX Item "pkr:<idx>  = PKey table record (SA RID + PKey table)"
.PD
Queries of non embedded attributes:
.IP "link:<idx> = link record" 4
.IX Item "link:<idx> = link record"
.PD 0
.IP "path:<idx> = path record" 4
.IX Item "path:<idx> = path record"
.IP "lft:<idx>  = Linear forwarding table" 4
.IX Item "lft:<idx>  = Linear forwarding table"
.IP "mcm:<idx>  = Multicast Member Record" 4
.IX Item "mcm:<idx>  = Multicast Member Record"
.IP "cpi:<idx>  = \s-1SA\s0 Class Port Info" 4
.IX Item "cpi:<idx>  = SA Class Port Info"
.IP "info:<idx> = Inform info (registration of event forwarding)" 4
.IX Item "info:<idx> = Inform info (registration of event forwarding)"
.IP "svc:<idx>  = Service Record" 4
.IX Item "svc:<idx>  = Service Record"
.IP "vlarb:<idx>= \s-1VL\s0 Arbitration table record" 4
.IX Item "vlarb:<idx>= VL Arbitration table record"
.PD
.Sh "\s-1NODE\s0 \s-1INFO\s0 \s-1RECORD\s0"
.IX Subsection "NODE INFO RECORD"
.RS 4
Component mask bits:
.RE
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_LID = 0x1" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_LID\fR = 0x1" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_LID = 0x1"
.PD 0
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_RESERVED1 = 0x2" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_RESERVED1\fR = 0x2" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_RESERVED1 = 0x2"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_BASEVERSION = 0x4" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_BASEVERSION\fR = 0x4" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_BASEVERSION = 0x4"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_CLASSVERSION = 0x8" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_CLASSVERSION\fR = 0x8" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_CLASSVERSION = 0x8"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_NODETYPE = 0x10" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_NODETYPE\fR = 0x10" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_NODETYPE = 0x10"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_NUMPORTS = 0x20" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_NUMPORTS\fR = 0x20" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_NUMPORTS = 0x20"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_SYSIMAGEGUID = 0x40" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_SYSIMAGEGUID\fR = 0x40" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_SYSIMAGEGUID = 0x40"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_NODEGUID = 0x80" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_NODEGUID\fR = 0x80" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_NODEGUID = 0x80"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_PORTGUID = 0x100" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_PORTGUID\fR = 0x100" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_PORTGUID = 0x100"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_PARTCAP = 0x200" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_PARTCAP\fR = 0x200" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_PARTCAP = 0x200"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_DEVID = 0x400" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_DEVID\fR = 0x400" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_DEVID = 0x400"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_REV = 0x800" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_REV\fR = 0x800" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_REV = 0x800"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_PORTNUM = 0x1000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_PORTNUM\fR = 0x1000" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_PORTNUM = 0x1000"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_VENDID = 0x2000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_VENDID\fR = 0x2000" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_VENDID = 0x2000"
.ie n .IP "[ Constant : int  ] $IB_NR_COMPMASK_NODEDESC = 0x4000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_NR_COMPMASK_NODEDESC\fR = 0x4000" 4
.IX Item "[ Constant : int  ] $IB_NR_COMPMASK_NODEDESC = 0x4000"
.PD
\&\-\-\-\-
.Sp
\fIclass sacNodeInfo\fR
.IX Subsection "class sacNodeInfo"
.Sp
Fields:
.IP "[ Member data: returns uint8_t * ] \-base_version" 4
.IX Item "[ Member data: returns uint8_t * ] -base_version"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-class_version" 4
.IX Item "[ Member data: returns uint8_t * ] -class_version"
.IP "[ Member data: returns uint8_t * ] \-node_type" 4
.IX Item "[ Member data: returns uint8_t * ] -node_type"
.IP "[ Member data: returns uint8_t * ] \-num_ports" 4
.IX Item "[ Member data: returns uint8_t * ] -num_ports"
.IP "[ Member data: returns ib_net64_t * ] \-sys_guid" 4
.IX Item "[ Member data: returns ib_net64_t * ] -sys_guid"
.IP "[ Member data: returns ib_net64_t * ] \-node_guid" 4
.IX Item "[ Member data: returns ib_net64_t * ] -node_guid"
.IP "[ Member data: returns ib_net64_t * ] \-port_guid" 4
.IX Item "[ Member data: returns ib_net64_t * ] -port_guid"
.IP "[ Member data: returns ib_net16_t * ] \-partition_cap" 4
.IX Item "[ Member data: returns ib_net16_t * ] -partition_cap"
.IP "[ Member data: returns ib_net16_t * ] \-device_id" 4
.IX Item "[ Member data: returns ib_net16_t * ] -device_id"
.IP "[ Member data: returns ib_net32_t * ] \-revision" 4
.IX Item "[ Member data: returns ib_net32_t * ] -revision"
.IP "[ Member data: returns ib_net32_t * ] \-port_num_vendor_id" 4
.IX Item "[ Member data: returns ib_net32_t * ] -port_num_vendor_id"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
\&\-\-\-\-
.Sp
\fIclass sacNodeRec\fR
.IX Subsection "class sacNodeRec"
.Sp
\&\s-1RID\s0 Fields:
.IP "[ Member data: returns ib_net16_t * ] \-lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid"
.PD 0
.IP "[ Member data: returns sacNodeInfo * ] \-node_info" 4
.IX Item "[ Member data: returns sacNodeInfo * ] -node_info"
.IP "[ Member data: returns ib_node_desc_t * ] \-node_desc" 4
.IX Item "[ Member data: returns ib_node_desc_t * ] -node_desc"
.PD
Methods:
.IP "[ Member : returns char * ] get comp_mask" 4
.IX Item "[ Member : returns char * ] get comp_mask"
.PD 0
.IP "[ Member : returns char * ] getTable comp_mask" 4
.IX Item "[ Member : returns char * ] getTable comp_mask"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
.Sh "\s-1PORT\s0 \s-1INFO\s0 \s-1RECORD\s0"
.IX Subsection "PORT INFO RECORD"
.RS 4
Component mask bits:
.RE
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_LID = 0x1" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_LID\fR = 0x1" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_LID = 0x1"
.PD 0
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_PORTNUM = 0x2" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_PORTNUM\fR = 0x2" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_PORTNUM = 0x2"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_RESV1 = 0x4" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_RESV1\fR = 0x4" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_RESV1 = 0x4"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_MKEY = 0x8" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_MKEY\fR = 0x8" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_MKEY = 0x8"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_GIDPRE = 0x10" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_GIDPRE\fR = 0x10" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_GIDPRE = 0x10"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_BASELID = 0x20" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_BASELID\fR = 0x20" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_BASELID = 0x20"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_SMLID = 0x40" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_SMLID\fR = 0x40" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_SMLID = 0x40"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_CAPMASK = 0x80" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_CAPMASK\fR = 0x80" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_CAPMASK = 0x80"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_DIAGCODE = 0x100" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_DIAGCODE\fR = 0x100" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_DIAGCODE = 0x100"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_MKEYLEASEPRD = 0x200" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_MKEYLEASEPRD\fR = 0x200" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_MKEYLEASEPRD = 0x200"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_LOCALPORTNUM = 0x400" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_LOCALPORTNUM\fR = 0x400" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_LOCALPORTNUM = 0x400"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_LNKWIDTHSUPPORT = 0x800" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_LNKWIDTHSUPPORT\fR = 0x800" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_LNKWIDTHSUPPORT = 0x800"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_LNKWIDTHACTIVE = 0x1000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_LNKWIDTHACTIVE\fR = 0x1000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_LNKWIDTHACTIVE = 0x1000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_LINKWIDTHENABLED = 0x2000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_LINKWIDTHENABLED\fR = 0x2000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_LINKWIDTHENABLED = 0x2000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_LNKSPEEDSUPPORT = 0x4000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_LNKSPEEDSUPPORT\fR = 0x4000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_LNKSPEEDSUPPORT = 0x4000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_PORTSTATE = 0x10000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_PORTSTATE\fR = 0x10000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_PORTSTATE = 0x10000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_PORTPHYSTATE = 0x20000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_PORTPHYSTATE\fR = 0x20000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_PORTPHYSTATE = 0x20000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_LINKDWNDFLTSTATE = 0x40000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_LINKDWNDFLTSTATE\fR = 0x40000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_LINKDWNDFLTSTATE = 0x40000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_MKEYPROTBITS = 0x80000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_MKEYPROTBITS\fR = 0x80000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_MKEYPROTBITS = 0x80000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_LMC = 0x100000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_LMC\fR = 0x100000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_LMC = 0x100000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_LINKSPEEDACTIVE = 0x200000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_LINKSPEEDACTIVE\fR = 0x200000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_LINKSPEEDACTIVE = 0x200000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_LINKSPEEDENABLE = 0x400000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_LINKSPEEDENABLE\fR = 0x400000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_LINKSPEEDENABLE = 0x400000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_NEIGHBORMTU = 0x800000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_NEIGHBORMTU\fR = 0x800000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_NEIGHBORMTU = 0x800000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_MASTERSMSL = 0x1000000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_MASTERSMSL\fR = 0x1000000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_MASTERSMSL = 0x1000000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_VLCAP = 0x2000000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_VLCAP\fR = 0x2000000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_VLCAP = 0x2000000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_INITTYPE = 0x4000000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_INITTYPE\fR = 0x4000000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_INITTYPE = 0x4000000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_VLHIGHLIMIT = 0x8000000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_VLHIGHLIMIT\fR = 0x8000000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_VLHIGHLIMIT = 0x8000000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_VLARBHIGHCAP = 0x10000000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_VLARBHIGHCAP\fR = 0x10000000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_VLARBHIGHCAP = 0x10000000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_VLARBLOWCAP = 0x20000000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_VLARBLOWCAP\fR = 0x20000000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_VLARBLOWCAP = 0x20000000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_INITTYPEREPLY = 0x40000000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_INITTYPEREPLY\fR = 0x40000000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_INITTYPEREPLY = 0x40000000"
.ie n .IP "[ Constant : int  ] $IB_PIR_COMPMASK_MTUCAP = 0x80000000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PIR_COMPMASK_MTUCAP\fR = 0x80000000" 4
.IX Item "[ Constant : int  ] $IB_PIR_COMPMASK_MTUCAP = 0x80000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_VLSTALLCNT = 0x100000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_VLSTALLCNT\fR = 0x100000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_VLSTALLCNT = 0x100000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_HOQLIFE = 0x200000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_HOQLIFE\fR = 0x200000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_HOQLIFE = 0x200000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_OPVLS = 0x400000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_OPVLS\fR = 0x400000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_OPVLS = 0x400000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_PARENFIN = 0x800000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_PARENFIN\fR = 0x800000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_PARENFIN = 0x800000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_PARENFOUT = 0x1000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_PARENFOUT\fR = 0x1000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_PARENFOUT = 0x1000000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_FILTERRAWIN = 0x2000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_FILTERRAWIN\fR = 0x2000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_FILTERRAWIN = 0x2000000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_FILTERRAWOUT = 0x4000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_FILTERRAWOUT\fR = 0x4000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_FILTERRAWOUT = 0x4000000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_MKEYVIO = 0x8000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_MKEYVIO\fR = 0x8000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_MKEYVIO = 0x8000000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_PKEYVIO = 0x10000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_PKEYVIO\fR = 0x10000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_PKEYVIO = 0x10000000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_QKEYVIO = 0x20000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_QKEYVIO\fR = 0x20000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_QKEYVIO = 0x20000000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_GUIDCAP = 0x40000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_GUIDCAP\fR = 0x40000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_GUIDCAP = 0x40000000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_RESV2 = 0x80000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_RESV2\fR = 0x80000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_RESV2 = 0x80000000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_SUBNTO = 0x100000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_SUBNTO\fR = 0x100000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_SUBNTO = 0x100000000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_RESV3 = 0x200000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_RESV3\fR = 0x200000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_RESV3 = 0x200000000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_RESPTIME = 0x400000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_RESPTIME\fR = 0x400000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_RESPTIME = 0x400000000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_LOCALPHYERR = 0x800000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_LOCALPHYERR\fR = 0x800000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_LOCALPHYERR = 0x800000000000"
.ie n .IP "[ Constant : char * ] $IB_PIR_COMPMASK_OVERRUNERR = 0x1000000000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PIR_COMPMASK_OVERRUNERR\fR = 0x1000000000000" 4
.IX Item "[ Constant : char * ] $IB_PIR_COMPMASK_OVERRUNERR = 0x1000000000000"
.PD
\&\-\-\-\-
.Sp
\fIclass sacPortInfo\fR
.IX Subsection "class sacPortInfo"
.Sp
Fields:
.IP "[ Member data: returns ib_net64_t * ] \-m_key" 4
.IX Item "[ Member data: returns ib_net64_t * ] -m_key"
.PD 0
.IP "[ Member data: returns ib_net64_t * ] \-subnet_prefix" 4
.IX Item "[ Member data: returns ib_net64_t * ] -subnet_prefix"
.IP "[ Member data: returns ib_net16_t * ] \-base_lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -base_lid"
.IP "[ Member data: returns ib_net16_t * ] \-master_sm_base_lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -master_sm_base_lid"
.IP "[ Member data: returns ib_net32_t * ] \-capability_mask" 4
.IX Item "[ Member data: returns ib_net32_t * ] -capability_mask"
.IP "[ Member data: returns ib_net16_t * ] \-diag_code" 4
.IX Item "[ Member data: returns ib_net16_t * ] -diag_code"
.IP "[ Member data: returns ib_net16_t * ] \-m_key_lease_period" 4
.IX Item "[ Member data: returns ib_net16_t * ] -m_key_lease_period"
.IP "[ Member data: returns uint8_t * ] \-local_port_num" 4
.IX Item "[ Member data: returns uint8_t * ] -local_port_num"
.IP "[ Member data: returns uint8_t * ] \-link_width_enabled" 4
.IX Item "[ Member data: returns uint8_t * ] -link_width_enabled"
.IP "[ Member data: returns uint8_t * ] \-link_width_supported" 4
.IX Item "[ Member data: returns uint8_t * ] -link_width_supported"
.IP "[ Member data: returns uint8_t * ] \-link_width_active" 4
.IX Item "[ Member data: returns uint8_t * ] -link_width_active"
.IP "[ Member data: returns uint8_t * ] \-state_info1" 4
.IX Item "[ Member data: returns uint8_t * ] -state_info1"
.PD
LinkSpeedSupported and PortState
.IP "[ Member data: returns uint8_t * ] \-state_info2" 4
.IX Item "[ Member data: returns uint8_t * ] -state_info2"
PortPhysState and LinkDownDefaultState
.IP "[ Member data: returns uint8_t * ] \-mkey_lmc" 4
.IX Item "[ Member data: returns uint8_t * ] -mkey_lmc"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-link_speed" 4
.IX Item "[ Member data: returns uint8_t * ] -link_speed"
.PD
LinkSpeedEnabled and LinkSpeedActive
.IP "[ Member data: returns uint8_t * ] \-mtu_smsl" 4
.IX Item "[ Member data: returns uint8_t * ] -mtu_smsl"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-vl_cap" 4
.IX Item "[ Member data: returns uint8_t * ] -vl_cap"
.PD
VlCap and InitType
.IP "[ Member data: returns uint8_t * ] \-vl_high_limit" 4
.IX Item "[ Member data: returns uint8_t * ] -vl_high_limit"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-vl_arb_high_cap" 4
.IX Item "[ Member data: returns uint8_t * ] -vl_arb_high_cap"
.IP "[ Member data: returns uint8_t * ] \-vl_arb_low_cap" 4
.IX Item "[ Member data: returns uint8_t * ] -vl_arb_low_cap"
.IP "[ Member data: returns uint8_t * ] \-mtu_cap" 4
.IX Item "[ Member data: returns uint8_t * ] -mtu_cap"
.IP "[ Member data: returns uint8_t * ] \-vl_stall_life" 4
.IX Item "[ Member data: returns uint8_t * ] -vl_stall_life"
.IP "[ Member data: returns uint8_t * ] \-vl_enforce" 4
.IX Item "[ Member data: returns uint8_t * ] -vl_enforce"
.IP "[ Member data: returns ib_net16_t * ] \-m_key_violations" 4
.IX Item "[ Member data: returns ib_net16_t * ] -m_key_violations"
.IP "[ Member data: returns ib_net16_t * ] \-p_key_violations" 4
.IX Item "[ Member data: returns ib_net16_t * ] -p_key_violations"
.IP "[ Member data: returns ib_net16_t * ] \-q_key_violations" 4
.IX Item "[ Member data: returns ib_net16_t * ] -q_key_violations"
.IP "[ Member data: returns uint8_t * ] \-guid_cap" 4
.IX Item "[ Member data: returns uint8_t * ] -guid_cap"
.IP "[ Member data: returns uint8_t * ] \-subnet_timeout" 4
.IX Item "[ Member data: returns uint8_t * ] -subnet_timeout"
.IP "[ Member data: returns uint8_t * ] \-resp_time_value" 4
.IX Item "[ Member data: returns uint8_t * ] -resp_time_value"
.IP "[ Member data: returns uint8_t * ] \-error_threshold" 4
.IX Item "[ Member data: returns uint8_t * ] -error_threshold"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
\&\-\-\-\-
.Sp
\fIclass sacPortRec\fR
.IX Subsection "class sacPortRec"
.Sp
\&\s-1RID\s0 Fields:
.IP "[ Member data: returns ib_net16_t * ] \-lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-port_num" 4
.IX Item "[ Member data: returns uint8_t * ] -port_num"
.IP "[ Member data: returns sacPortInfo * ] \-port_info" 4
.IX Item "[ Member data: returns sacPortInfo * ] -port_info"
.PD
Methods:
.IP "[ Member : returns char * ] get comp_mask" 4
.IX Item "[ Member : returns char * ] get comp_mask"
.PD 0
.IP "[ Member : returns char * ] getTable comp_mask" 4
.IX Item "[ Member : returns char * ] getTable comp_mask"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
.Sh "\s-1SM\s0 \s-1INFO\s0 \s-1RECORD\s0"
.IX Subsection "SM INFO RECORD"
.RS 4
Component mask bits:
.RE
.ie n .IP "[ Constant : char * ] $IB_SMR_COMPMASK_LID = 0x1" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SMR_COMPMASK_LID\fR = 0x1" 4
.IX Item "[ Constant : char * ] $IB_SMR_COMPMASK_LID = 0x1"
.PD 0
.ie n .IP "[ Constant : char * ] $IB_SMR_COMPMASK_GUID = 0x2" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SMR_COMPMASK_GUID\fR = 0x2" 4
.IX Item "[ Constant : char * ] $IB_SMR_COMPMASK_GUID = 0x2"
.ie n .IP "[ Constant : char * ] $IB_SMR_COMPMASK_SM_KEY = 0x4" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SMR_COMPMASK_SM_KEY\fR = 0x4" 4
.IX Item "[ Constant : char * ] $IB_SMR_COMPMASK_SM_KEY = 0x4"
.ie n .IP "[ Constant : char * ] $IB_SMR_COMPMASK_ACT_COUNT = 0x8" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SMR_COMPMASK_ACT_COUNT\fR = 0x8" 4
.IX Item "[ Constant : char * ] $IB_SMR_COMPMASK_ACT_COUNT = 0x8"
.ie n .IP "[ Constant : int  ] $IB_SMR_COMPMASK_STATE = 0x10" 4
.el .IP "[ Constant : int  ] \f(CW$IB_SMR_COMPMASK_STATE\fR = 0x10" 4
.IX Item "[ Constant : int  ] $IB_SMR_COMPMASK_STATE = 0x10"
.ie n .IP "[ Constant : int  ] $IB_SMR_COMPMASK_PRI = 0x20" 4
.el .IP "[ Constant : int  ] \f(CW$IB_SMR_COMPMASK_PRI\fR = 0x20" 4
.IX Item "[ Constant : int  ] $IB_SMR_COMPMASK_PRI = 0x20"
.PD
\&\-\-\-\-
.Sp
\fIclass sacSmInfo\fR
.IX Subsection "class sacSmInfo"
.Sp
Fields:
.IP "[ Member data: returns ib_net64_t * ] \-guid" 4
.IX Item "[ Member data: returns ib_net64_t * ] -guid"
.PD 0
.IP "[ Member data: returns ib_net64_t * ] \-sm_key" 4
.IX Item "[ Member data: returns ib_net64_t * ] -sm_key"
.IP "[ Member data: returns ib_net32_t * ] \-act_count" 4
.IX Item "[ Member data: returns ib_net32_t * ] -act_count"
.IP "[ Member data: returns uint8_t * ] \-pri_state" 4
.IX Item "[ Member data: returns uint8_t * ] -pri_state"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
\&\-\-\-\-
.Sp
\fIclass sacSmRec\fR
.IX Subsection "class sacSmRec"
.Sp
\&\s-1RID\s0 Fields:
.IP "[ Member data: returns ib_net16_t * ] \-lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid"
.PD 0
.IP "[ Member data: returns sacSmInfo * ] \-sm_info" 4
.IX Item "[ Member data: returns sacSmInfo * ] -sm_info"
.PD
Methods:
.IP "[ Member : returns char * ] get comp_mask" 4
.IX Item "[ Member : returns char * ] get comp_mask"
.PD 0
.IP "[ Member : returns char * ] getTable comp_mask" 4
.IX Item "[ Member : returns char * ] getTable comp_mask"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
.Sh "\s-1SWITCH\s0 \s-1INFO\s0 \s-1RECORD\s0"
.IX Subsection "SWITCH INFO RECORD"
.RS 4
Component mask bits:
.RE
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_LID = 0x1" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_LID\fR = 0x1" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_LID = 0x1"
.PD 0
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_LIN_CAP = 0x2" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_LIN_CAP\fR = 0x2" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_LIN_CAP = 0x2"
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_RAND_CAP = 0x4" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_RAND_CAP\fR = 0x4" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_RAND_CAP = 0x4"
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_MCAST_CAP = 0x8" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_MCAST_CAP\fR = 0x8" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_MCAST_CAP = 0x8"
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_LIN_TOP = 0x10" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_LIN_TOP\fR = 0x10" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_LIN_TOP = 0x10"
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_DEF_PORT = 0x20" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_DEF_PORT\fR = 0x20" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_DEF_PORT = 0x20"
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_DEF_MCAST_PRI = 0x40" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_DEF_MCAST_PRI\fR = 0x40" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_DEF_MCAST_PRI = 0x40"
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_DEF_MCAST_NOT = 0x80" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_DEF_MCAST_NOT\fR = 0x80" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_DEF_MCAST_NOT = 0x80"
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_STATE = 0x100" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_STATE\fR = 0x100" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_STATE = 0x100"
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_LIFE = 0x200" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_LIFE\fR = 0x200" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_LIFE = 0x200"
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_LMC = 0x400" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_LMC\fR = 0x400" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_LMC = 0x400"
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_ENFORCE_CAP = 0x800" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_ENFORCE_CAP\fR = 0x800" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_ENFORCE_CAP = 0x800"
.ie n .IP "[ Constant : char * ] $IB_SWR_COMPMASK_FLAGS = 0x1000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SWR_COMPMASK_FLAGS\fR = 0x1000" 4
.IX Item "[ Constant : char * ] $IB_SWR_COMPMASK_FLAGS = 0x1000"
.PD
\&\-\-\-\-
.Sp
\fIclass sacSwInfo\fR
.IX Subsection "class sacSwInfo"
.Sp
Fields:
.IP "[ Member data: returns ib_net16_t * ] \-lin_cap" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lin_cap"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-rand_cap" 4
.IX Item "[ Member data: returns ib_net16_t * ] -rand_cap"
.IP "[ Member data: returns ib_net16_t * ] \-mcast_cap" 4
.IX Item "[ Member data: returns ib_net16_t * ] -mcast_cap"
.IP "[ Member data: returns ib_net16_t * ] \-lin_top" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lin_top"
.IP "[ Member data: returns uint8_t * ] \-def_port" 4
.IX Item "[ Member data: returns uint8_t * ] -def_port"
.IP "[ Member data: returns uint8_t * ] \-def_mcast_pri_port" 4
.IX Item "[ Member data: returns uint8_t * ] -def_mcast_pri_port"
.IP "[ Member data: returns uint8_t * ] \-def_mcast_not_port" 4
.IX Item "[ Member data: returns uint8_t * ] -def_mcast_not_port"
.IP "[ Member data: returns uint8_t * ] \-life_state" 4
.IX Item "[ Member data: returns uint8_t * ] -life_state"
.IP "[ Member data: returns ib_net16_t * ] \-lids_per_port" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lids_per_port"
.IP "[ Member data: returns ib_net16_t * ] \-enforce_cap" 4
.IX Item "[ Member data: returns ib_net16_t * ] -enforce_cap"
.IP "[ Member data: returns uint8_t * ] \-flags" 4
.IX Item "[ Member data: returns uint8_t * ] -flags"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
\&\-\-\-\-
.Sp
\fIclass sacSwRec\fR
.IX Subsection "class sacSwRec"
.Sp
\&\s-1RID\s0 Fields:
.IP "[ Member data: returns ib_net16_t * ] \-lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid"
.PD 0
.IP "[ Member data: returns sacSwInfo * ] \-switch_info" 4
.IX Item "[ Member data: returns sacSwInfo * ] -switch_info"
.PD
Methods:
.IP "[ Member : returns char * ] get comp_mask" 4
.IX Item "[ Member : returns char * ] get comp_mask"
.PD 0
.IP "[ Member : returns char * ] getTable comp_mask" 4
.IX Item "[ Member : returns char * ] getTable comp_mask"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
.Sh "\s-1LINK\s0 \s-1RECORD\s0"
.IX Subsection "LINK RECORD"
.RS 4
Component mask bits:
.RE
.ie n .IP "[ Constant : int  ] $IB_LR_COMPMASK_FROM_LID = 0x1" 4
.el .IP "[ Constant : int  ] \f(CW$IB_LR_COMPMASK_FROM_LID\fR = 0x1" 4
.IX Item "[ Constant : int  ] $IB_LR_COMPMASK_FROM_LID = 0x1"
.PD 0
.ie n .IP "[ Constant : int  ] $IB_LR_COMPMASK_FROM_PORT = 0x2" 4
.el .IP "[ Constant : int  ] \f(CW$IB_LR_COMPMASK_FROM_PORT\fR = 0x2" 4
.IX Item "[ Constant : int  ] $IB_LR_COMPMASK_FROM_PORT = 0x2"
.ie n .IP "[ Constant : int  ] $IB_LR_COMPMASK_TO_PORT = 0x4" 4
.el .IP "[ Constant : int  ] \f(CW$IB_LR_COMPMASK_TO_PORT\fR = 0x4" 4
.IX Item "[ Constant : int  ] $IB_LR_COMPMASK_TO_PORT = 0x4"
.ie n .IP "[ Constant : int  ] $IB_LR_COMPMASK_TO_LID = 0x8" 4
.el .IP "[ Constant : int  ] \f(CW$IB_LR_COMPMASK_TO_LID\fR = 0x8" 4
.IX Item "[ Constant : int  ] $IB_LR_COMPMASK_TO_LID = 0x8"
.PD
\&\-\-\-\-
.Sp
\fIclass sacLinkRec\fR
.IX Subsection "class sacLinkRec"
.Sp
Fields:
.IP "[ Member data: returns ib_net16_t * ] \-from_lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -from_lid"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-from_port_num" 4
.IX Item "[ Member data: returns uint8_t * ] -from_port_num"
.IP "[ Member data: returns uint8_t * ] \-to_port_num" 4
.IX Item "[ Member data: returns uint8_t * ] -to_port_num"
.IP "[ Member data: returns ib_net16_t * ] \-to_lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -to_lid"
.PD
Methods:
.IP "[ Member : returns char * ] get comp_mask" 4
.IX Item "[ Member : returns char * ] get comp_mask"
.PD 0
.IP "[ Member : returns char * ] getTable comp_mask" 4
.IX Item "[ Member : returns char * ] getTable comp_mask"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
.Sh "\s-1PATH\s0 \s-1RECORD\s0"
.IX Subsection "PATH RECORD"
.RS 4
Component mask bits:
.RE
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_DGID = 0x4" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_DGID\fR = 0x4" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_DGID = 0x4"
.PD 0
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_SGID = 0x8" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_SGID\fR = 0x8" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_SGID = 0x8"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_DLID = 0x10" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_DLID\fR = 0x10" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_DLID = 0x10"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_SLID = 0x20" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_SLID\fR = 0x20" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_SLID = 0x20"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_RAWTRAFIC = 0x40" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_RAWTRAFIC\fR = 0x40" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_RAWTRAFIC = 0x40"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_RESV0 = 0x80" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_RESV0\fR = 0x80" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_RESV0 = 0x80"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_FLOWLABEL = 0x100" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_FLOWLABEL\fR = 0x100" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_FLOWLABEL = 0x100"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_HOPLIMIT = 0x200" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_HOPLIMIT\fR = 0x200" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_HOPLIMIT = 0x200"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_TCLASS = 0x400" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_TCLASS\fR = 0x400" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_TCLASS = 0x400"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_REVERSIBLE = 0x800" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_REVERSIBLE\fR = 0x800" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_REVERSIBLE = 0x800"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_NUMBPATH = 0x1000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_NUMBPATH\fR = 0x1000" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_NUMBPATH = 0x1000"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_PKEY = 0x2000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_PKEY\fR = 0x2000" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_PKEY = 0x2000"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_RESV1 = 0x4000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_RESV1\fR = 0x4000" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_RESV1 = 0x4000"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_SL = 0x8000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_SL\fR = 0x8000" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_SL = 0x8000"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_MTUSELEC = 0x10000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_MTUSELEC\fR = 0x10000" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_MTUSELEC = 0x10000"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_MTU = 0x20000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_MTU\fR = 0x20000" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_MTU = 0x20000"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_RATESELEC = 0x40000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_RATESELEC\fR = 0x40000" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_RATESELEC = 0x40000"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_RATE = 0x80000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_RATE\fR = 0x80000" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_RATE = 0x80000"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_PKTLIFETIMESELEC = 0x100000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_PKTLIFETIMESELEC\fR = 0x100000" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_PKTLIFETIMESELEC = 0x100000"
.ie n .IP "[ Constant : int  ] $IB_PR_COMPMASK_PFTLIFETIME = 0x200000" 4
.el .IP "[ Constant : int  ] \f(CW$IB_PR_COMPMASK_PFTLIFETIME\fR = 0x200000" 4
.IX Item "[ Constant : int  ] $IB_PR_COMPMASK_PFTLIFETIME = 0x200000"
.PD
\&\-\-\-\-
.Sp
\fIclass sacPathRec\fR
.IX Subsection "class sacPathRec"
.Sp
Fields:
.IP "[ Member data: returns ib_gid_t * ] \-dgid" 4
.IX Item "[ Member data: returns ib_gid_t * ] -dgid"
.PD 0
.IP "[ Member data: returns ib_gid_t * ] \-sgid" 4
.IX Item "[ Member data: returns ib_gid_t * ] -sgid"
.IP "[ Member data: returns ib_net16_t * ] \-dlid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -dlid"
.IP "[ Member data: returns ib_net16_t * ] \-slid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -slid"
.IP "[ Member data: returns ib_net32_t * ] \-hop_flow_raw" 4
.IX Item "[ Member data: returns ib_net32_t * ] -hop_flow_raw"
.IP "[ Member data: returns uint8_t * ] \-tclass" 4
.IX Item "[ Member data: returns uint8_t * ] -tclass"
.IP "[ Member data: returns uint8_t * ] \-num_path" 4
.IX Item "[ Member data: returns uint8_t * ] -num_path"
.IP "[ Member data: returns ib_net16_t * ] \-pkey" 4
.IX Item "[ Member data: returns ib_net16_t * ] -pkey"
.IP "[ Member data: returns ib_net16_t * ] \-sl" 4
.IX Item "[ Member data: returns ib_net16_t * ] -sl"
.IP "[ Member data: returns uint8_t * ] \-mtu" 4
.IX Item "[ Member data: returns uint8_t * ] -mtu"
.IP "[ Member data: returns uint8_t * ] \-rate" 4
.IX Item "[ Member data: returns uint8_t * ] -rate"
.IP "[ Member data: returns uint8_t * ] \-pkt_life" 4
.IX Item "[ Member data: returns uint8_t * ] -pkt_life"
.IP "[ Member data: returns uint8_t * ] \-preference" 4
.IX Item "[ Member data: returns uint8_t * ] -preference"
.PD
Methds:
.IP "[ Member : returns char * ] get comp_mask" 4
.IX Item "[ Member : returns char * ] get comp_mask"
.PD 0
.IP "[ Member : returns char * ] getTable comp_mask" 4
.IX Item "[ Member : returns char * ] getTable comp_mask"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
.Sh "\s-1LINEAR\s0 \s-1FORWARDING\s0 \s-1TABLE\s0"
.IX Subsection "LINEAR FORWARDING TABLE"
.RS 4
Component mask bits:
.RE
.ie n .IP "[ Constant : char * ] $IB_LFT_COMPMASK_LID = 0x1" 4
.el .IP "[ Constant : char * ] \f(CW$IB_LFT_COMPMASK_LID\fR = 0x1" 4
.IX Item "[ Constant : char * ] $IB_LFT_COMPMASK_LID = 0x1"
.PD 0
.ie n .IP "[ Constant : char * ] $IB_LFT_COMPMASK_BLOCK = 0x2" 4
.el .IP "[ Constant : char * ] \f(CW$IB_LFT_COMPMASK_BLOCK\fR = 0x2" 4
.IX Item "[ Constant : char * ] $IB_LFT_COMPMASK_BLOCK = 0x2"
.PD
\&\-\-\-\-
.Sp
\fIclass sacLFTRec\fR
.IX Subsection "class sacLFTRec"
.Sp
Fields:
.IP "[ Member data: returns ib_net16_t * ] \-lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-block_num" 4
.IX Item "[ Member data: returns ib_net16_t * ] -block_num"
.IP "[ Member data: returns ib_lft_t * ] \-lft" 4
.IX Item "[ Member data: returns ib_lft_t * ] -lft"
.PD
Methods:
.IP "[ Member : returns char * ] get comp_mask" 4
.IX Item "[ Member : returns char * ] get comp_mask"
.PD 0
.IP "[ Member : returns char * ] getTable comp_mask" 4
.IX Item "[ Member : returns char * ] getTable comp_mask"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
.Sh "\s-1MULTICAST\s0 \s-1MEMBER\s0 \s-1RECORD\s0"
.IX Subsection "MULTICAST MEMBER RECORD"
.RS 4
Component mask bits:
.RE
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_GID = 0x1" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_GID\fR = 0x1" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_GID = 0x1"
.PD 0
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_MGID = 0x1" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_MGID\fR = 0x1" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_MGID = 0x1"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_PORT_GID = 0x2" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_PORT_GID\fR = 0x2" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_PORT_GID = 0x2"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_QKEY = 0x4" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_QKEY\fR = 0x4" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_QKEY = 0x4"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_MLID = 0x8" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_MLID\fR = 0x8" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_MLID = 0x8"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_MTU_SEL = 0x10" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_MTU_SEL\fR = 0x10" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_MTU_SEL = 0x10"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_MTU = 0x20" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_MTU\fR = 0x20" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_MTU = 0x20"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_TCLASS = 0x40" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_TCLASS\fR = 0x40" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_TCLASS = 0x40"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_PKEY = 0x80" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_PKEY\fR = 0x80" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_PKEY = 0x80"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_RATE_SEL = 0x100" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_RATE_SEL\fR = 0x100" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_RATE_SEL = 0x100"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_RATE = 0x200" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_RATE\fR = 0x200" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_RATE = 0x200"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_LIFE_SEL = 0x400" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_LIFE_SEL\fR = 0x400" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_LIFE_SEL = 0x400"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_LIFE = 0x800" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_LIFE\fR = 0x800" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_LIFE = 0x800"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_SL = 0x1000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_SL\fR = 0x1000" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_SL = 0x1000"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_FLOW = 0x2000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_FLOW\fR = 0x2000" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_FLOW = 0x2000"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_HOP = 0x4000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_HOP\fR = 0x4000" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_HOP = 0x4000"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_SCOPE = 0x8000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_SCOPE\fR = 0x8000" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_SCOPE = 0x8000"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_JOIN_STATE = 0x10000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_JOIN_STATE\fR = 0x10000" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_JOIN_STATE = 0x10000"
.ie n .IP "[ Constant : char * ] $IB_MCR_COMPMASK_PROXY = 0x20000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_MCR_COMPMASK_PROXY\fR = 0x20000" 4
.IX Item "[ Constant : char * ] $IB_MCR_COMPMASK_PROXY = 0x20000"
.PD
\&\-\-\-\-
.Sp
\fIclass sacMCMRec\fR
.IX Subsection "class sacMCMRec"
.Sp
Fields:
.IP "[ Member data: returns ib_gid_t * ] \-mgid" 4
.IX Item "[ Member data: returns ib_gid_t * ] -mgid"
.PD 0
.IP "[ Member data: returns ib_gid_t * ] \-port_gid" 4
.IX Item "[ Member data: returns ib_gid_t * ] -port_gid"
.IP "[ Member data: returns ib_net32_t * ] \-qkey" 4
.IX Item "[ Member data: returns ib_net32_t * ] -qkey"
.IP "[ Member data: returns ib_net16_t * ] \-mlid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -mlid"
.IP "[ Member data: returns uint8_t * ] \-mtu" 4
.IX Item "[ Member data: returns uint8_t * ] -mtu"
.IP "[ Member data: returns uint8_t * ] \-tclass" 4
.IX Item "[ Member data: returns uint8_t * ] -tclass"
.IP "[ Member data: returns ib_net16_t * ] \-pkey" 4
.IX Item "[ Member data: returns ib_net16_t * ] -pkey"
.IP "[ Member data: returns uint8_t * ] \-rate" 4
.IX Item "[ Member data: returns uint8_t * ] -rate"
.IP "[ Member data: returns uint8_t * ] \-pkt_life" 4
.IX Item "[ Member data: returns uint8_t * ] -pkt_life"
.IP "[ Member data: returns ib_net32_t * ] \-sl_flow_hop" 4
.IX Item "[ Member data: returns ib_net32_t * ] -sl_flow_hop"
.IP "[ Member data: returns uint8_t * ] \-scope_state" 4
.IX Item "[ Member data: returns uint8_t * ] -scope_state"
.PD
Methods:
.IP "[ Member : returns char * ] get comp_mask" 4
.IX Item "[ Member : returns char * ] get comp_mask"
.PD 0
.IP "[ Member : returns char * ] getTable comp_mask" 4
.IX Item "[ Member : returns char * ] getTable comp_mask"
.IP "[ Member : returns char * ] set comp_mask" 4
.IX Item "[ Member : returns char * ] set comp_mask"
.IP "[ Member : returns char * ] del comp_mask" 4
.IX Item "[ Member : returns char * ] del comp_mask"
.IP "[ Member : returns int  ] proxy_join_get" 4
.IX Item "[ Member : returns int  ] proxy_join_get"
.PD
Instead of simple field cget
.IP "[ Member : returns void  ] proxy_join_set proxy_join" 4
.IX Item "[ Member : returns void  ] proxy_join_set proxy_join"
Instead of simple field configure
.IP "[ Member : returns void  ] obj_delete" 4
.IX Item "[ Member : returns void  ] obj_delete"
Delete the object
.Sh "\s-1SA\s0 \s-1CLASS\s0 \s-1PORT\s0 \s-1INFO\s0"
.IX Subsection "SA CLASS PORT INFO"
.RS 4
\&\-\-\-\-
.Sp
\fIclass sacClassPortInfo\fR
.IX Subsection "class sacClassPortInfo"
.Sp
Fields:
.RE
.IP "[ Member data: returns uint8_t * ] \-base_ver" 4
.IX Item "[ Member data: returns uint8_t * ] -base_ver"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-class_ver" 4
.IX Item "[ Member data: returns uint8_t * ] -class_ver"
.IP "[ Member data: returns ib_net16_t * ] \-cap_mask" 4
.IX Item "[ Member data: returns ib_net16_t * ] -cap_mask"
.IP "[ Member data: returns ib_net32_t * ] \-resp_time_val" 4
.IX Item "[ Member data: returns ib_net32_t * ] -resp_time_val"
.IP "[ Member data: returns ib_gid_t * ] \-redir_gid" 4
.IX Item "[ Member data: returns ib_gid_t * ] -redir_gid"
.IP "[ Member data: returns ib_net32_t * ] \-redir_tc_sl_fl" 4
.IX Item "[ Member data: returns ib_net32_t * ] -redir_tc_sl_fl"
.IP "[ Member data: returns ib_net16_t * ] \-redir_lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -redir_lid"
.IP "[ Member data: returns ib_net16_t * ] \-redir_pkey" 4
.IX Item "[ Member data: returns ib_net16_t * ] -redir_pkey"
.IP "[ Member data: returns ib_net32_t * ] \-redir_qp" 4
.IX Item "[ Member data: returns ib_net32_t * ] -redir_qp"
.IP "[ Member data: returns ib_net32_t * ] \-redir_qkey" 4
.IX Item "[ Member data: returns ib_net32_t * ] -redir_qkey"
.IP "[ Member data: returns ib_gid_t * ] \-trap_gid" 4
.IX Item "[ Member data: returns ib_gid_t * ] -trap_gid"
.IP "[ Member data: returns ib_net32_t * ] \-trap_tc_sl_fl" 4
.IX Item "[ Member data: returns ib_net32_t * ] -trap_tc_sl_fl"
.IP "[ Member data: returns ib_net16_t * ] \-trap_lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -trap_lid"
.IP "[ Member data: returns ib_net16_t * ] \-trap_pkey" 4
.IX Item "[ Member data: returns ib_net16_t * ] -trap_pkey"
.IP "[ Member data: returns ib_net32_t * ] \-trap_hop_qp" 4
.IX Item "[ Member data: returns ib_net32_t * ] -trap_hop_qp"
.IP "[ Member data: returns ib_net32_t * ] \-trap_qkey" 4
.IX Item "[ Member data: returns ib_net32_t * ] -trap_qkey"
.PD
Methods:
.IP "[ Member : returns char * ] get" 4
.IX Item "[ Member : returns char * ] get"
.PD 0
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
.Sh "\s-1INFORM\s0 \s-1INFO\s0 \s-1RECORD\s0"
.IX Subsection "INFORM INFO RECORD"
.RS 4
The inform Info is built with heirarchy of objects. So several classes are defined.
.Sp
\&\-\-\-\-
.Sp
\fIclass sacInformInfo\fR
.IX Subsection "class sacInformInfo"
.Sp
Fields:
.RE
.IP "[ Member data: returns ib_gid_t * ] \-gid" 4
.IX Item "[ Member data: returns ib_gid_t * ] -gid"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-lid_range_begin" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid_range_begin"
.IP "[ Member data: returns ib_net16_t * ] \-lid_range_end" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid_range_end"
.IP "[ Member data: returns ib_net16_t * ] \-reserved1" 4
.IX Item "[ Member data: returns ib_net16_t * ] -reserved1"
.IP "[ Member data: returns uint8_t * ] \-is_generic" 4
.IX Item "[ Member data: returns uint8_t * ] -is_generic"
.IP "[ Member data: returns uint8_t * ] \-subscribe" 4
.IX Item "[ Member data: returns uint8_t * ] -subscribe"
.IP "[ Member data: returns ib_net16_t * ] \-trap_type" 4
.IX Item "[ Member data: returns ib_net16_t * ] -trap_type"
.IP "[ Member data: returns sacInformInfo_g_or_v * ] \-g_or_v" 4
.IX Item "[ Member data: returns sacInformInfo_g_or_v * ] -g_or_v"
.PD
Methods:
.IP "[ Member : returns char * ] set" 4
.IX Item "[ Member : returns char * ] set"
.PD 0
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
\&\-\-\-\-
.Sp
\fIclass sacInformInfo_g_or_v\fR
.IX Subsection "class sacInformInfo_g_or_v"
.Sp
Fields:
.IP "[ Member data: returns sacInformInfo_g_or_v_generic * ] \-generic" 4
.IX Item "[ Member data: returns sacInformInfo_g_or_v_generic * ] -generic"
.PD 0
.IP "[ Member data: returns sacInformInfo_g_or_v_vend * ] \-vend" 4
.IX Item "[ Member data: returns sacInformInfo_g_or_v_vend * ] -vend"
.PD
\&\-\-\-\-
.Sp
\fIclass sacInformInfo_g_or_v_generic\fR
.IX Subsection "class sacInformInfo_g_or_v_generic"
.Sp
Fields:
.IP "[ Member data: returns ib_net16_t * ] \-trap_num" 4
.IX Item "[ Member data: returns ib_net16_t * ] -trap_num"
.PD 0
.IP "[ Member data: returns ib_net32_t * ] \-qpn_resp_time_val" 4
.IX Item "[ Member data: returns ib_net32_t * ] -qpn_resp_time_val"
.IP "[ Member data: returns uint8_t * ] \-reserved2" 4
.IX Item "[ Member data: returns uint8_t * ] -reserved2"
.IP "[ Member data: returns uint8_t * ] \-node_type_msb" 4
.IX Item "[ Member data: returns uint8_t * ] -node_type_msb"
.IP "[ Member data: returns ib_net16_t * ] \-node_type_lsb" 4
.IX Item "[ Member data: returns ib_net16_t * ] -node_type_lsb"
.PD
\&\-\-\-\-
.Sp
\fIclass sacInformInfo_g_or_v_vend\fR
.IX Subsection "class sacInformInfo_g_or_v_vend"
.Sp
Fields:
.IP "[ Member data: returns ib_net16_t * ] \-dev_id" 4
.IX Item "[ Member data: returns ib_net16_t * ] -dev_id"
.PD 0
.IP "[ Member data: returns ib_net32_t * ] \-qpn_resp_time_val" 4
.IX Item "[ Member data: returns ib_net32_t * ] -qpn_resp_time_val"
.IP "[ Member data: returns uint8_t * ] \-reserved2" 4
.IX Item "[ Member data: returns uint8_t * ] -reserved2"
.IP "[ Member data: returns uint8_t * ] \-vendor_id_msb" 4
.IX Item "[ Member data: returns uint8_t * ] -vendor_id_msb"
.IP "[ Member data: returns ib_net16_t * ] \-vendor_id_lsb" 4
.IX Item "[ Member data: returns ib_net16_t * ] -vendor_id_lsb"
.PD
.Sh "\s-1SERVICE\s0 \s-1RECORD\s0"
.IX Subsection "SERVICE RECORD"
.RS 4
Component mask bits:
.RE
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SID = 0x1" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SID\fR = 0x1" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SID = 0x1"
.PD 0
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SGID = 0x1" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SGID\fR = 0x1" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SGID = 0x1"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SPKEY = 0x2" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SPKEY\fR = 0x2" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SPKEY = 0x2"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_RES1 = 0x4" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_RES1\fR = 0x4" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_RES1 = 0x4"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SLEASE = 0x8" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SLEASE\fR = 0x8" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SLEASE = 0x8"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SKEY = 0x10" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SKEY\fR = 0x10" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SKEY = 0x10"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SNAME = 0x20" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SNAME\fR = 0x20" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SNAME = 0x20"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_0 = 0x40" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_0\fR = 0x40" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_0 = 0x40"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_1 = 0x80" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_1\fR = 0x80" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_1 = 0x80"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_2 = 0x100" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_2\fR = 0x100" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_2 = 0x100"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_3 = 0x200" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_3\fR = 0x200" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_3 = 0x200"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_4 = 0x400" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_4\fR = 0x400" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_4 = 0x400"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_5 = 0x800" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_5\fR = 0x800" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_5 = 0x800"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_6 = 0x1000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_6\fR = 0x1000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_6 = 0x1000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_7 = 0x2000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_7\fR = 0x2000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_7 = 0x2000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_8 = 0x4000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_8\fR = 0x4000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_8 = 0x4000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_9 = 0x8000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_9\fR = 0x8000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_9 = 0x8000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_10 = 0x10000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_10\fR = 0x10000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_10 = 0x10000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_11 = 0x20000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_11\fR = 0x20000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_11 = 0x20000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_12 = 0x40000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_12\fR = 0x40000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_12 = 0x40000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_13 = 0x80000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_13\fR = 0x80000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_13 = 0x80000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_14 = 0x100000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_14\fR = 0x100000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_14 = 0x100000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_15 = 0x200000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA8_15\fR = 0x200000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA8_15 = 0x200000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_0 = 0x400000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA16_0\fR = 0x400000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_0 = 0x400000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_1 = 0x800000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA16_1\fR = 0x800000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_1 = 0x800000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_2 = 0x1000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA16_2\fR = 0x1000000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_2 = 0x1000000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_3 = 0x2000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA16_3\fR = 0x2000000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_3 = 0x2000000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_4 = 0x4000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA16_4\fR = 0x4000000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_4 = 0x4000000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_5 = 0x8000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA16_5\fR = 0x8000000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_5 = 0x8000000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_6 = 0x10000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA16_6\fR = 0x10000000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_6 = 0x10000000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_7 = 0x20000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA16_7\fR = 0x20000000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA16_7 = 0x20000000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA32_0 = 0x40000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA32_0\fR = 0x40000000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA32_0 = 0x40000000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA32_1 = 0x80000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA32_1\fR = 0x80000000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA32_1 = 0x80000000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA32_2 = 0x100000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA32_2\fR = 0x100000000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA32_2 = 0x100000000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA32_3 = 0x200000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA32_3\fR = 0x200000000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA32_3 = 0x200000000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA64_0 = 0x400000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA64_0\fR = 0x400000000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA64_0 = 0x400000000"
.ie n .IP "[ Constant : char * ] $IB_SR_COMPMASK_SDATA64_1 = 0x800000000" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SR_COMPMASK_SDATA64_1\fR = 0x800000000" 4
.IX Item "[ Constant : char * ] $IB_SR_COMPMASK_SDATA64_1 = 0x800000000"
.PD
\&\-\-\-\-
.Sp
\fIclass sacServiceRec\fR
.IX Subsection "class sacServiceRec"
.Sp
Fields:
.IP "[ Member data: returns ib_net64_t * ] \-service_id" 4
.IX Item "[ Member data: returns ib_net64_t * ] -service_id"
.PD 0
.IP "[ Member data: returns ib_gid_t * ] \-service_gid" 4
.IX Item "[ Member data: returns ib_gid_t * ] -service_gid"
.IP "[ Member data: returns ib_net16_t * ] \-service_pkey" 4
.IX Item "[ Member data: returns ib_net16_t * ] -service_pkey"
.IP "[ Member data: returns ib_net16_t * ] \-resv" 4
.IX Item "[ Member data: returns ib_net16_t * ] -resv"
.IP "[ Member data: returns ib_net32_t * ] \-service_lease" 4
.IX Item "[ Member data: returns ib_net32_t * ] -service_lease"
.IP "[ Member data: returns uint8_array_t * ] \-service_key" 4
.IX Item "[ Member data: returns uint8_array_t * ] -service_key"
.IP "[ Member data: returns ib_svc_name_t * ] \-service_name" 4
.IX Item "[ Member data: returns ib_svc_name_t * ] -service_name"
.IP "[ Member data: returns uint8_array_t * ] \-service_data8" 4
.IX Item "[ Member data: returns uint8_array_t * ] -service_data8"
.IP "[ Member data: returns ib_net16_array_t * ] \-service_data16" 4
.IX Item "[ Member data: returns ib_net16_array_t * ] -service_data16"
.IP "[ Member data: returns ib_net32_array_t * ] \-service_data32" 4
.IX Item "[ Member data: returns ib_net32_array_t * ] -service_data32"
.IP "[ Member data: returns ib_net64_array_t * ] \-service_data64" 4
.IX Item "[ Member data: returns ib_net64_array_t * ] -service_data64"
.PD
Methods:
.IP "[ Member : returns char * ] get comp_mask" 4
.IX Item "[ Member : returns char * ] get comp_mask"
.PD 0
.IP "[ Member : returns char * ] set comp_mask" 4
.IX Item "[ Member : returns char * ] set comp_mask"
.IP "[ Member : returns char * ] getTable comp_mask" 4
.IX Item "[ Member : returns char * ] getTable comp_mask"
.IP "[ Member : returns char * ] delete comp_mask" 4
.IX Item "[ Member : returns char * ] delete comp_mask"
.IP "[ Member : returns void  ] obj_delete" 4
.IX Item "[ Member : returns void  ] obj_delete"
.PD
.Sh "\s-1SL\s0 to \s-1VL\s0 \s-1TABLE\s0 \s-1RECORD\s0"
.IX Subsection "SL to VL TABLE RECORD"
.RS 4
Component mask bits:
.RE
.ie n .IP "[ Constant : char * ] $IB_SLVL_COMPMASK_LID = 0x1" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SLVL_COMPMASK_LID\fR = 0x1" 4
.IX Item "[ Constant : char * ] $IB_SLVL_COMPMASK_LID = 0x1"
.PD 0
.ie n .IP "[ Constant : char * ] $IB_SLVL_COMPMASK_IN_PORT = 0x2" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SLVL_COMPMASK_IN_PORT\fR = 0x2" 4
.IX Item "[ Constant : char * ] $IB_SLVL_COMPMASK_IN_PORT = 0x2"
.ie n .IP "[ Constant : char * ] $IB_SLVL_COMPMASK_OUT_PORT = 0x4" 4
.el .IP "[ Constant : char * ] \f(CW$IB_SLVL_COMPMASK_OUT_PORT\fR = 0x4" 4
.IX Item "[ Constant : char * ] $IB_SLVL_COMPMASK_OUT_PORT = 0x4"
.PD
\&\-\-\-\-
.Sp
\fIclass sacSlVlTbl\fR
.IX Subsection "class sacSlVlTbl"
.IP "[ Member data: returns uint8_array_t * ] \-raw_vl_by_sl" 4
.IX Item "[ Member data: returns uint8_array_t * ] -raw_vl_by_sl"
\&\-\-\-\-
.Sp
\fIclass sacSlVlRec\fR
.IX Subsection "class sacSlVlRec"
.Sp
\&\s-1RID\s0 Fields:
.IP "[ Member data: returns ib_net16_t * ] \-lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid"
for \s-1CA:\s0 lid of port, for switch lid of port 0
.IP "[ Member data: returns uint8_t * ] \-in_port_num" 4
.IX Item "[ Member data: returns uint8_t * ] -in_port_num"
reserved for \s-1CA\s0's
.IP "[ Member data: returns uint8_t * ] \-out_port_num" 4
.IX Item "[ Member data: returns uint8_t * ] -out_port_num"
reserved for \s-1CA\s0's
.IP "[ Member data: returns uint32_t * ] \-resv" 4
.IX Item "[ Member data: returns uint32_t * ] -resv"
.PD 0
.IP "[ Member data: returns sacSlVlTbl * ] \-slvl_tbl" 4
.IX Item "[ Member data: returns sacSlVlTbl * ] -slvl_tbl"
.PD
Methods:
.IP "[ Member : returns char * ] get comp_mask" 4
.IX Item "[ Member : returns char * ] get comp_mask"
.PD 0
.IP "[ Member : returns char * ] getTable comp_mask" 4
.IX Item "[ Member : returns char * ] getTable comp_mask"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
.Sh "\s-1VL\s0 \s-1ARBITRATION\s0 \s-1TABLE\s0 \s-1RECORD\s0"
.IX Subsection "VL ARBITRATION TABLE RECORD"
.RS 4
Component mask bits:
.RE
.ie n .IP "[ Constant : char * ] $IB_VLA_COMPMASK_LID = 0x1" 4
.el .IP "[ Constant : char * ] \f(CW$IB_VLA_COMPMASK_LID\fR = 0x1" 4
.IX Item "[ Constant : char * ] $IB_VLA_COMPMASK_LID = 0x1"
.PD 0
.ie n .IP "[ Constant : char * ] $IB_VLA_COMPMASK_OUT_PORT = 0x2" 4
.el .IP "[ Constant : char * ] \f(CW$IB_VLA_COMPMASK_OUT_PORT\fR = 0x2" 4
.IX Item "[ Constant : char * ] $IB_VLA_COMPMASK_OUT_PORT = 0x2"
.ie n .IP "[ Constant : char * ] $IB_VLA_COMPMASK_BLOCK = 0x4" 4
.el .IP "[ Constant : char * ] \f(CW$IB_VLA_COMPMASK_BLOCK\fR = 0x4" 4
.IX Item "[ Constant : char * ] $IB_VLA_COMPMASK_BLOCK = 0x4"
.PD
\&\-\-\-\-
.Sp
\fIclass sacVlArbRec\fR
.IX Subsection "class sacVlArbRec"
.Sp
Fields:
.IP "[ Member data: returns ib_net16_t * ] \-lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid"
for \s-1CA:\s0 lid of port, for switch lid of port 0
.IP "[ Member data: returns uint8_t * ] \-port_num" 4
.IX Item "[ Member data: returns uint8_t * ] -port_num"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-block_num" 4
.IX Item "[ Member data: returns uint8_t * ] -block_num"
.IP "[ Member data: returns uint32_t * ] \-reserved" 4
.IX Item "[ Member data: returns uint32_t * ] -reserved"
.IP "[ Member data: returns sac_vl_arb_tbl_t * ] \-vl_arb_tbl" 4
.IX Item "[ Member data: returns sac_vl_arb_tbl_t * ] -vl_arb_tbl"
.PD
Methods:
.IP "[ Member : returns char * ] get comp_mask" 4
.IX Item "[ Member : returns char * ] get comp_mask"
.PD 0
.IP "[ Member : returns char * ] getTable comp_mask" 4
.IX Item "[ Member : returns char * ] getTable comp_mask"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
.Sh "\s-1PKEY\s0 \s-1TABLE\s0 \s-1RECORD\s0"
.IX Subsection "PKEY TABLE RECORD"
.RS 4
Component mask bits:
.RE
.ie n .IP "[ Constant : char * ] $IB_PKEY_COMPMASK_LID = 0x1" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PKEY_COMPMASK_LID\fR = 0x1" 4
.IX Item "[ Constant : char * ] $IB_PKEY_COMPMASK_LID = 0x1"
.PD 0
.ie n .IP "[ Constant : char * ] $IB_PKEY_COMPMASK_BLOCK = 0x2" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PKEY_COMPMASK_BLOCK\fR = 0x2" 4
.IX Item "[ Constant : char * ] $IB_PKEY_COMPMASK_BLOCK = 0x2"
.ie n .IP "[ Constant : char * ] $IB_PKEY_COMPMASK_PORT = 0x4" 4
.el .IP "[ Constant : char * ] \f(CW$IB_PKEY_COMPMASK_PORT\fR = 0x4" 4
.IX Item "[ Constant : char * ] $IB_PKEY_COMPMASK_PORT = 0x4"
.PD
\&\-\-\-\-
.Sp
\fIclass sacPKeyTbl\fR
.IX Subsection "class sacPKeyTbl"
.Sp
Fields:
.IP "[ Member data: returns ib_net16_array_t * ] \-pkey_entry" 4
.IX Item "[ Member data: returns ib_net16_array_t * ] -pkey_entry"
\&\-\-\-\-
.Sp
\fIclass sacPKeyRec\fR
.IX Subsection "class sacPKeyRec"
.Sp
\&\s-1RID\s0 Fields:
.IP "[ Member data: returns ib_net16_t * ] \-lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid"
for \s-1CA:\s0 lid of port, for switch lid of port 0
.IP "[ Member data: returns uint16_t * ] \-block_num" 4
.IX Item "[ Member data: returns uint16_t * ] -block_num"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-port_num" 4
.IX Item "[ Member data: returns uint8_t * ] -port_num"
.PD
for switch: port number, for \s-1CA:\s0 reserved
.IP "[ Member data: returns uint8_t * ] \-reserved1" 4
.IX Item "[ Member data: returns uint8_t * ] -reserved1"
.PD 0
.IP "[ Member data: returns uint16_t * ] \-reserved2" 4
.IX Item "[ Member data: returns uint16_t * ] -reserved2"
.IP "[ Member data: returns sacPKeyTbl * ] \-pkey_tbl" 4
.IX Item "[ Member data: returns sacPKeyTbl * ] -pkey_tbl"
.PD
Methods:
.IP "[ Member : returns char * ] get comp_mask" 4
.IX Item "[ Member : returns char * ] get comp_mask"
.PD 0
.IP "[ Member : returns char * ] getTable comp_mask" 4
.IX Item "[ Member : returns char * ] getTable comp_mask"
.IP "[ Member : returns void  ] delete" 4
.IX Item "[ Member : returns void  ] delete"
.PD
.SH "Subnet Management MADs (SMPs)"
.IX Header "Subnet Management MADs (SMPs)"
The \s-1SM\s0 interface supports sending Subnet Management Packets to the fabric devices. The specific attributes that can be access is provided in detail in each sub section below. 
.Sp
A set of object types is defined. The user can allocate a new attribute object. Then the object can be set using configure or the direct manipulation methods. 
Extra methods are provided for each object:
=item setByDr <dr> <attrMod>
.Sp
Set the attribute on the object accessible by the given directed route. A directed route is a list of port numbers to go out from.
.IP "getByDr <dr> <attrMod>" 4
.IX Item "getByDr <dr> <attrMod>"
Get the attribute value by traversing a directed route.
.Sp
setByLid <lid> <attrMod>
.Sp
Set the attribute on the object accessible by the given \s-1LID\s0
.Sp
getByLid <lid> <attrMod>
.Sp
get the attribute on the object accessible by the given \s-1LID\s0
.Sh "class smNodeInfo"
.IX Subsection "class smNodeInfo"
.RS 4
Fields:
.RE
.IP "[ Member data: returns uint8_t * ] \-base_version" 4
.IX Item "[ Member data: returns uint8_t * ] -base_version"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-class_version" 4
.IX Item "[ Member data: returns uint8_t * ] -class_version"
.IP "[ Member data: returns uint8_t * ] \-node_type" 4
.IX Item "[ Member data: returns uint8_t * ] -node_type"
.IP "[ Member data: returns uint8_t * ] \-num_ports" 4
.IX Item "[ Member data: returns uint8_t * ] -num_ports"
.IP "[ Member data: returns ib_net64_t * ] \-sys_guid" 4
.IX Item "[ Member data: returns ib_net64_t * ] -sys_guid"
.IP "[ Member data: returns ib_net64_t * ] \-node_guid" 4
.IX Item "[ Member data: returns ib_net64_t * ] -node_guid"
.IP "[ Member data: returns ib_net64_t * ] \-port_guid" 4
.IX Item "[ Member data: returns ib_net64_t * ] -port_guid"
.IP "[ Member data: returns ib_net16_t * ] \-partition_cap" 4
.IX Item "[ Member data: returns ib_net16_t * ] -partition_cap"
.IP "[ Member data: returns ib_net16_t * ] \-device_id" 4
.IX Item "[ Member data: returns ib_net16_t * ] -device_id"
.IP "[ Member data: returns ib_net32_t * ] \-revision" 4
.IX Item "[ Member data: returns ib_net32_t * ] -revision"
.IP "[ Member data: returns ib_net32_t * ] \-port_num_vendor_id" 4
.IX Item "[ Member data: returns ib_net32_t * ] -port_num_vendor_id"
.PD
Methods:
.IP "[ Member : returns int  ] getByDr dr" 4
.IX Item "[ Member : returns int  ] getByDr dr"
.PD 0
.IP "[ Member : returns int  ] setByDr dr" 4
.IX Item "[ Member : returns int  ] setByDr dr"
.IP "[ Member : returns int  ] getByLid lid" 4
.IX Item "[ Member : returns int  ] getByLid lid"
.IP "[ Member : returns int  ] setByLid lid" 4
.IX Item "[ Member : returns int  ] setByLid lid"
.PD
.SH "class smPortInfo"
.IX Header "class smPortInfo"
Fields:
.IP "[ Member data: returns ib_net64_t * ] \-m_key" 4
.IX Item "[ Member data: returns ib_net64_t * ] -m_key"
.PD 0
.IP "[ Member data: returns ib_net64_t * ] \-subnet_prefix" 4
.IX Item "[ Member data: returns ib_net64_t * ] -subnet_prefix"
.IP "[ Member data: returns ib_net16_t * ] \-base_lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -base_lid"
.IP "[ Member data: returns ib_net16_t * ] \-master_sm_base_lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -master_sm_base_lid"
.IP "[ Member data: returns ib_net32_t * ] \-capability_mask" 4
.IX Item "[ Member data: returns ib_net32_t * ] -capability_mask"
.IP "[ Member data: returns ib_net16_t * ] \-diag_code" 4
.IX Item "[ Member data: returns ib_net16_t * ] -diag_code"
.IP "[ Member data: returns ib_net16_t * ] \-m_key_lease_period" 4
.IX Item "[ Member data: returns ib_net16_t * ] -m_key_lease_period"
.IP "[ Member data: returns uint8_t * ] \-local_port_num" 4
.IX Item "[ Member data: returns uint8_t * ] -local_port_num"
.IP "[ Member data: returns uint8_t * ] \-link_width_enabled" 4
.IX Item "[ Member data: returns uint8_t * ] -link_width_enabled"
.IP "[ Member data: returns uint8_t * ] \-link_width_supported" 4
.IX Item "[ Member data: returns uint8_t * ] -link_width_supported"
.IP "[ Member data: returns uint8_t * ] \-link_width_active" 4
.IX Item "[ Member data: returns uint8_t * ] -link_width_active"
.IP "[ Member data: returns uint8_t * ] \-state_info1" 4
.IX Item "[ Member data: returns uint8_t * ] -state_info1"
.PD
LinkSpeedSupported and PortState
.IP "[ Member data: returns uint8_t * ] \-state_info2" 4
.IX Item "[ Member data: returns uint8_t * ] -state_info2"
PortPhysState and LinkDownDefaultState
.IP "[ Member data: returns uint8_t * ] \-mkey_lmc" 4
.IX Item "[ Member data: returns uint8_t * ] -mkey_lmc"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-link_speed" 4
.IX Item "[ Member data: returns uint8_t * ] -link_speed"
.PD
LinkSpeedEnabled and LinkSpeedActive
.IP "[ Member data: returns uint8_t * ] \-mtu_smsl" 4
.IX Item "[ Member data: returns uint8_t * ] -mtu_smsl"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-vl_cap" 4
.IX Item "[ Member data: returns uint8_t * ] -vl_cap"
.PD
VlCap and InitType
.IP "[ Member data: returns uint8_t * ] \-vl_high_limit" 4
.IX Item "[ Member data: returns uint8_t * ] -vl_high_limit"
.PD 0
.IP "[ Member data: returns uint8_t * ] \-vl_arb_high_cap" 4
.IX Item "[ Member data: returns uint8_t * ] -vl_arb_high_cap"
.IP "[ Member data: returns uint8_t * ] \-vl_arb_low_cap" 4
.IX Item "[ Member data: returns uint8_t * ] -vl_arb_low_cap"
.IP "[ Member data: returns uint8_t * ] \-mtu_cap" 4
.IX Item "[ Member data: returns uint8_t * ] -mtu_cap"
.IP "[ Member data: returns uint8_t * ] \-vl_stall_life" 4
.IX Item "[ Member data: returns uint8_t * ] -vl_stall_life"
.IP "[ Member data: returns uint8_t * ] \-vl_enforce" 4
.IX Item "[ Member data: returns uint8_t * ] -vl_enforce"
.IP "[ Member data: returns ib_net16_t * ] \-m_key_violations" 4
.IX Item "[ Member data: returns ib_net16_t * ] -m_key_violations"
.IP "[ Member data: returns ib_net16_t * ] \-p_key_violations" 4
.IX Item "[ Member data: returns ib_net16_t * ] -p_key_violations"
.IP "[ Member data: returns ib_net16_t * ] \-q_key_violations" 4
.IX Item "[ Member data: returns ib_net16_t * ] -q_key_violations"
.IP "[ Member data: returns uint8_t * ] \-guid_cap" 4
.IX Item "[ Member data: returns uint8_t * ] -guid_cap"
.IP "[ Member data: returns uint8_t * ] \-subnet_timeout" 4
.IX Item "[ Member data: returns uint8_t * ] -subnet_timeout"
.IP "[ Member data: returns uint8_t * ] \-resp_time_value" 4
.IX Item "[ Member data: returns uint8_t * ] -resp_time_value"
.IP "[ Member data: returns uint8_t * ] \-error_threshold" 4
.IX Item "[ Member data: returns uint8_t * ] -error_threshold"
.PD
Methods:
.IP "[ Member : returns int  ] getByDr dr portNum" 4
.IX Item "[ Member : returns int  ] getByDr dr portNum"
.PD 0
.IP "[ Member : returns int  ] setByDr dr portNum" 4
.IX Item "[ Member : returns int  ] setByDr dr portNum"
.IP "[ Member : returns int  ] getByLid lid portNum" 4
.IX Item "[ Member : returns int  ] getByLid lid portNum"
.IP "[ Member : returns int  ] setByLid lid portNum" 4
.IX Item "[ Member : returns int  ] setByLid lid portNum"
.PD
.Sh "class smSwInfo"
.IX Subsection "class smSwInfo"
.IP "[ Member data: returns ib_net16_t * ] \-lin_cap" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lin_cap"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-rand_cap" 4
.IX Item "[ Member data: returns ib_net16_t * ] -rand_cap"
.IP "[ Member data: returns ib_net16_t * ] \-mcast_cap" 4
.IX Item "[ Member data: returns ib_net16_t * ] -mcast_cap"
.IP "[ Member data: returns ib_net16_t * ] \-lin_top" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lin_top"
.IP "[ Member data: returns uint8_t * ] \-def_port" 4
.IX Item "[ Member data: returns uint8_t * ] -def_port"
.IP "[ Member data: returns uint8_t * ] \-def_mcast_pri_port" 4
.IX Item "[ Member data: returns uint8_t * ] -def_mcast_pri_port"
.IP "[ Member data: returns uint8_t * ] \-def_mcast_not_port" 4
.IX Item "[ Member data: returns uint8_t * ] -def_mcast_not_port"
.IP "[ Member data: returns uint8_t * ] \-life_state" 4
.IX Item "[ Member data: returns uint8_t * ] -life_state"
.IP "[ Member data: returns ib_net16_t * ] \-lids_per_port" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lids_per_port"
.IP "[ Member data: returns ib_net16_t * ] \-enforce_cap" 4
.IX Item "[ Member data: returns ib_net16_t * ] -enforce_cap"
.IP "[ Member data: returns uint8_t * ] \-flags" 4
.IX Item "[ Member data: returns uint8_t * ] -flags"
.IP "[ Member : returns int  ] getByDr dr" 4
.IX Item "[ Member : returns int  ] getByDr dr"
.IP "[ Member : returns int  ] setByDr dr" 4
.IX Item "[ Member : returns int  ] setByDr dr"
.IP "[ Member : returns int  ] getByLid lid" 4
.IX Item "[ Member : returns int  ] getByLid lid"
.IP "[ Member : returns int  ] setByLid lid" 4
.IX Item "[ Member : returns int  ] setByLid lid"
.PD
.Sh "class smLftBlock"
.IX Subsection "class smLftBlock"
.IP "[ Member data: returns uint8_array_t * ] \-lft" 4
.IX Item "[ Member data: returns uint8_array_t * ] -lft"
.PD 0
.IP "[ Member : returns int  ] getByDr dr blockNum" 4
.IX Item "[ Member : returns int  ] getByDr dr blockNum"
.IP "[ Member : returns int  ] setByDr dr blockNum" 4
.IX Item "[ Member : returns int  ] setByDr dr blockNum"
.IP "[ Member : returns int  ] getByLid lid blockNum" 4
.IX Item "[ Member : returns int  ] getByLid lid blockNum"
.IP "[ Member : returns int  ] setByLid lid blockNum" 4
.IX Item "[ Member : returns int  ] setByLid lid blockNum"
.PD
.Sh "class smMftBlock"
.IX Subsection "class smMftBlock"
.IP "[ Member data: returns ib_net16_array_t * ] \-mft" 4
.IX Item "[ Member data: returns ib_net16_array_t * ] -mft"
.PD 0
.IP "[ Member : returns int  ] getByDr dr startLid startPort" 4
.IX Item "[ Member : returns int  ] getByDr dr startLid startPort"
.IP "[ Member : returns int  ] setByDr dr startLid startPort" 4
.IX Item "[ Member : returns int  ] setByDr dr startLid startPort"
.IP "[ Member : returns int  ] getByLid lid startLid startPort" 4
.IX Item "[ Member : returns int  ] getByLid lid startLid startPort"
.IP "[ Member : returns int  ] setByLid lid startLid startPort" 4
.IX Item "[ Member : returns int  ] setByLid lid startLid startPort"
.PD
.Sh "class smGuidInfo"
.IX Subsection "class smGuidInfo"
.IP "[ Member data: returns ib_net64_array_t * ] \-guid" 4
.IX Item "[ Member data: returns ib_net64_array_t * ] -guid"
.PD 0
.IP "[ Member : returns int  ] getByDr dr blockNum" 4
.IX Item "[ Member : returns int  ] getByDr dr blockNum"
.IP "[ Member : returns int  ] setByDr dr blockNum" 4
.IX Item "[ Member : returns int  ] setByDr dr blockNum"
.IP "[ Member : returns int  ] getByLid lid blockNum" 4
.IX Item "[ Member : returns int  ] getByLid lid blockNum"
.IP "[ Member : returns int  ] setByLid lid blockNum" 4
.IX Item "[ Member : returns int  ] setByLid lid blockNum"
.PD
.Sh "class smPkeyTable"
.IX Subsection "class smPkeyTable"
.IP "[ Member data: returns ib_net16_array_t * ] \-pkey_entry" 4
.IX Item "[ Member data: returns ib_net16_array_t * ] -pkey_entry"
.PD 0
.IP "[ Member : returns int  ] getByDr dr portNum blockNum" 4
.IX Item "[ Member : returns int  ] getByDr dr portNum blockNum"
.IP "[ Member : returns int  ] setByDr dr portNum blockNum" 4
.IX Item "[ Member : returns int  ] setByDr dr portNum blockNum"
.IP "[ Member : returns int  ] getByLid lid portNum blockNum" 4
.IX Item "[ Member : returns int  ] getByLid lid portNum blockNum"
.IP "[ Member : returns int  ] setByLid lid portNum blockNum" 4
.IX Item "[ Member : returns int  ] setByLid lid portNum blockNum"
.PD
.Sh "class smSlVlTable"
.IX Subsection "class smSlVlTable"
.IP "[ Member data: returns uint8_array_t * ] \-raw_vl_by_sl" 4
.IX Item "[ Member data: returns uint8_array_t * ] -raw_vl_by_sl"
.PD 0
.IP "[ Member : returns int  ] getByDr dr inPortNum outPortNum" 4
.IX Item "[ Member : returns int  ] getByDr dr inPortNum outPortNum"
.IP "[ Member : returns int  ] setByDr dr inPortNum outPortNum" 4
.IX Item "[ Member : returns int  ] setByDr dr inPortNum outPortNum"
.IP "[ Member : returns int  ] getByLid lid inPortNum outPortNum" 4
.IX Item "[ Member : returns int  ] getByLid lid inPortNum outPortNum"
.IP "[ Member : returns int  ] setByLid lid inPortNum outPortNum" 4
.IX Item "[ Member : returns int  ] setByLid lid inPortNum outPortNum"
.PD
.Sh "class smVlArbTable"
.IX Subsection "class smVlArbTable"
.IP "[ Member data: returns ib_vl_arb_element_t * ] \-vl_entry" 4
.IX Item "[ Member data: returns ib_vl_arb_element_t * ] -vl_entry"
.PD 0
.IP "[ Member : returns int  ] getByDr dr portNum block" 4
.IX Item "[ Member : returns int  ] getByDr dr portNum block"
.IP "[ Member : returns int  ] setByDr dr portNum block" 4
.IX Item "[ Member : returns int  ] setByDr dr portNum block"
.IP "[ Member : returns int  ] getByLid lid portNum block" 4
.IX Item "[ Member : returns int  ] getByLid lid portNum block"
.IP "[ Member : returns int  ] setByLid lid portNum block" 4
.IX Item "[ Member : returns int  ] setByLid lid portNum block"
.PD
.Sh "class smNodeDesc"
.IX Subsection "class smNodeDesc"
.IP "[ Member data: returns ibsm_node_desc_str_t * ] \-description" 4
.IX Item "[ Member data: returns ibsm_node_desc_str_t * ] -description"
.PD 0
.IP "[ Member : returns int  ] getByDr dr" 4
.IX Item "[ Member : returns int  ] getByDr dr"
.IP "[ Member : returns int  ] setByDr dr" 4
.IX Item "[ Member : returns int  ] setByDr dr"
.IP "[ Member : returns int  ] getByLid lid" 4
.IX Item "[ Member : returns int  ] getByLid lid"
.IP "[ Member : returns int  ] setByLid lid" 4
.IX Item "[ Member : returns int  ] setByLid lid"
.PD
.Sh "class smSMInfo"
.IX Subsection "class smSMInfo"
.IP "[ Member data: returns ib_net64_t * ] \-guid" 4
.IX Item "[ Member data: returns ib_net64_t * ] -guid"
.PD 0
.IP "[ Member data: returns ib_net64_t * ] \-sm_key" 4
.IX Item "[ Member data: returns ib_net64_t * ] -sm_key"
.IP "[ Member data: returns ib_net32_t * ] \-act_count" 4
.IX Item "[ Member data: returns ib_net32_t * ] -act_count"
.IP "[ Member data: returns uint8_t * ] \-pri_state" 4
.IX Item "[ Member data: returns uint8_t * ] -pri_state"
.IP "[ Member : returns int  ] getByDr dr" 4
.IX Item "[ Member : returns int  ] getByDr dr"
.IP "[ Member : returns int  ] setByDr dr" 4
.IX Item "[ Member : returns int  ] setByDr dr"
.IP "[ Member : returns int  ] getByLid lid" 4
.IX Item "[ Member : returns int  ] getByLid lid"
.IP "[ Member : returns int  ] setByLid lid" 4
.IX Item "[ Member : returns int  ] setByLid lid"
.PD
.Sh "class smNotice"
.IX Subsection "class smNotice"
.RS 4
The \s-1NOTICE\s0 attribute is built out of several sub objects
.RE
.IP "[ Member data: returns uint8_t * ] \-generic_type" 4
.IX Item "[ Member data: returns uint8_t * ] -generic_type"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-issuer_lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -issuer_lid"
.IP "[ Member data: returns ib_net16_t * ] \-toggle_count" 4
.IX Item "[ Member data: returns ib_net16_t * ] -toggle_count"
.IP "[ Member data: returns ib_gid_t * ] \-issuer_gid" 4
.IX Item "[ Member data: returns ib_gid_t * ] -issuer_gid"
.IP "[ Member data: returns smNotice_g_or_v * ] \-g_or_v" 4
.IX Item "[ Member data: returns smNotice_g_or_v * ] -g_or_v"
.IP "[ Member data: returns smNotice_data_details * ] \-data_details" 4
.IX Item "[ Member data: returns smNotice_data_details * ] -data_details"
.IP "[ Member : returns int  ] trapByDr dr" 4
.IX Item "[ Member : returns int  ] trapByDr dr"
.IP "[ Member : returns int  ] trapByLid lid" 4
.IX Item "[ Member : returns int  ] trapByLid lid"
.PD
\&\-\-\-\-
.Sp
\fIclass smNotice_g_or_v\fR
.IX Subsection "class smNotice_g_or_v"
.IP "[ Member data: returns smNotice_g_or_v_generic * ] \-generic" 4
.IX Item "[ Member data: returns smNotice_g_or_v_generic * ] -generic"
.PD 0
.IP "[ Member data: returns smNotice_g_or_v_vend * ] \-vend" 4
.IX Item "[ Member data: returns smNotice_g_or_v_vend * ] -vend"
.PD
\&\-\-\-\-
.Sp
\fIclass smNotice_data_details\fR
.IX Subsection "class smNotice_data_details"
.IP "[ Member data: returns smNotice_data_details_raw_data * ] \-raw_data" 4
.IX Item "[ Member data: returns smNotice_data_details_raw_data * ] -raw_data"
.PD 0
.IP "[ Member data: returns smNotice_data_details_ntc_64_67 * ] \-ntc_64_67" 4
.IX Item "[ Member data: returns smNotice_data_details_ntc_64_67 * ] -ntc_64_67"
.IP "[ Member data: returns smNotice_data_details_ntc_128 * ] \-ntc_128" 4
.IX Item "[ Member data: returns smNotice_data_details_ntc_128 * ] -ntc_128"
.IP "[ Member data: returns smNotice_data_details_ntc_129_131 * ] \-ntc_129_131" 4
.IX Item "[ Member data: returns smNotice_data_details_ntc_129_131 * ] -ntc_129_131"
.IP "[ Member data: returns smNotice_data_details_ntc_144 * ] \-ntc_144" 4
.IX Item "[ Member data: returns smNotice_data_details_ntc_144 * ] -ntc_144"
.IP "[ Member data: returns smNotice_data_details_ntc_145 * ] \-ntc_145" 4
.IX Item "[ Member data: returns smNotice_data_details_ntc_145 * ] -ntc_145"
.IP "[ Member data: returns smNotice_data_details_ntc_256 * ] \-ntc_256" 4
.IX Item "[ Member data: returns smNotice_data_details_ntc_256 * ] -ntc_256"
.IP "[ Member data: returns smNotice_data_details_ntc_257_258 * ] \-ntc_257_258" 4
.IX Item "[ Member data: returns smNotice_data_details_ntc_257_258 * ] -ntc_257_258"
.IP "[ Member data: returns smNotice_data_details_ntc_259 * ] \-ntc_259" 4
.IX Item "[ Member data: returns smNotice_data_details_ntc_259 * ] -ntc_259"
.PD
\&\-\-\-\-
.Sp
\fIclass smNotice_g_or_v_generic\fR
.IX Subsection "class smNotice_g_or_v_generic"
.IP "[ Member data: returns uint8_t * ] \-prod_type_msb" 4
.IX Item "[ Member data: returns uint8_t * ] -prod_type_msb"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-prod_type_lsb" 4
.IX Item "[ Member data: returns ib_net16_t * ] -prod_type_lsb"
.IP "[ Member data: returns ib_net16_t * ] \-trap_num" 4
.IX Item "[ Member data: returns ib_net16_t * ] -trap_num"
.PD
\&\-\-\-\-
.Sp
\fIclass smNotice_g_or_v_vend\fR
.IX Subsection "class smNotice_g_or_v_vend"
.IP "[ Member data: returns uint8_t * ] \-vend_id_msb" 4
.IX Item "[ Member data: returns uint8_t * ] -vend_id_msb"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-vend_id_lsb" 4
.IX Item "[ Member data: returns ib_net16_t * ] -vend_id_lsb"
.IP "[ Member data: returns ib_net16_t * ] \-dev_id" 4
.IX Item "[ Member data: returns ib_net16_t * ] -dev_id"
.PD
\&\-\-\-\-
.Sp
\fIclass smNotice_data_details_raw_data\fR
.IX Subsection "class smNotice_data_details_raw_data"
.IP "[ Member data: returns uint8_array_t * ] \-details" 4
.IX Item "[ Member data: returns uint8_array_t * ] -details"
\&\-\-\-\-
.Sp
\fIclass smNotice_data_details_ntc_64_67\fR
.IX Subsection "class smNotice_data_details_ntc_64_67"
.IP "[ Member data: returns uint8_array_t * ] \-res" 4
.IX Item "[ Member data: returns uint8_array_t * ] -res"
.PD 0
.IP "[ Member data: returns ib_gid_t * ] \-gid" 4
.IX Item "[ Member data: returns ib_gid_t * ] -gid"
.PD
the Node or Multicast Group that came in/out
.Sp
\&\-\-\-\-
.Sp
\fIclass smNotice_data_details_ntc_128\fR
.IX Subsection "class smNotice_data_details_ntc_128"
.IP "[ Member data: returns ib_net16_t * ] \-sw_lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -sw_lid"
the sw lid of which link state changed
.Sp
\&\-\-\-\-
.Sp
\fIclass smNotice_data_details_ntc_129_131\fR
.IX Subsection "class smNotice_data_details_ntc_129_131"
.IP "[ Member data: returns ib_net16_t * ] \-pad" 4
.IX Item "[ Member data: returns ib_net16_t * ] -pad"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid"
.PD
lid and port number of the violation
.IP "[ Member data: returns uint8_t * ] \-port_num" 4
.IX Item "[ Member data: returns uint8_t * ] -port_num"
\&\-\-\-\-
.Sp
\fIclass smNotice_data_details_ntc_144\fR
.IX Subsection "class smNotice_data_details_ntc_144"
.IP "[ Member data: returns ib_net16_t * ] \-pad1" 4
.IX Item "[ Member data: returns ib_net16_t * ] -pad1"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid"
.PD
lid where capability mask changed
.IP "[ Member data: returns ib_net16_t * ] \-pad2" 4
.IX Item "[ Member data: returns ib_net16_t * ] -pad2"
.PD 0
.IP "[ Member data: returns ib_net32_t * ] \-new_cap_mask" 4
.IX Item "[ Member data: returns ib_net32_t * ] -new_cap_mask"
.PD
new capability mask
.Sp
\&\-\-\-\-
.Sp
\fIclass smNotice_data_details_ntc_145\fR
.IX Subsection "class smNotice_data_details_ntc_145"
.IP "[ Member data: returns ib_net16_t * ] \-pad1" 4
.IX Item "[ Member data: returns ib_net16_t * ] -pad1"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid"
.PD
lid where sys guid changed
.IP "[ Member data: returns ib_net16_t * ] \-pad2" 4
.IX Item "[ Member data: returns ib_net16_t * ] -pad2"
.PD 0
.IP "[ Member data: returns ib_net64_t * ] \-new_sys_guid" 4
.IX Item "[ Member data: returns ib_net64_t * ] -new_sys_guid"
.PD
new system image guid
.Sp
\&\-\-\-\-
.Sp
\fIclass smNotice_data_details_ntc_256\fR
.IX Subsection "class smNotice_data_details_ntc_256"
.IP "[ Member data: returns ib_net16_t * ] \-pad1" 4
.IX Item "[ Member data: returns ib_net16_t * ] -pad1"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid"
.IP "[ Member data: returns ib_net16_t * ] \-pad2" 4
.IX Item "[ Member data: returns ib_net16_t * ] -pad2"
.IP "[ Member data: returns uint8_t * ] \-method" 4
.IX Item "[ Member data: returns uint8_t * ] -method"
.IP "[ Member data: returns uint8_t * ] \-pad3" 4
.IX Item "[ Member data: returns uint8_t * ] -pad3"
.IP "[ Member data: returns ib_net16_t * ] \-attr_id" 4
.IX Item "[ Member data: returns ib_net16_t * ] -attr_id"
.IP "[ Member data: returns ib_net32_t * ] \-attr_mod" 4
.IX Item "[ Member data: returns ib_net32_t * ] -attr_mod"
.IP "[ Member data: returns ib_net64_t * ] \-mkey" 4
.IX Item "[ Member data: returns ib_net64_t * ] -mkey"
.IP "[ Member data: returns uint8_t * ] \-dr_slid" 4
.IX Item "[ Member data: returns uint8_t * ] -dr_slid"
.IP "[ Member data: returns uint8_t * ] \-dr_trunc_hop" 4
.IX Item "[ Member data: returns uint8_t * ] -dr_trunc_hop"
.IP "[ Member data: returns uint8_array_t * ] \-dr_rtn_path" 4
.IX Item "[ Member data: returns uint8_array_t * ] -dr_rtn_path"
.PD
\&\-\-\-\-
.Sp
\fIclass smNotice_data_details_ntc_257_258\fR
.IX Subsection "class smNotice_data_details_ntc_257_258"
.IP "[ Member data: returns ib_net16_t * ] \-pad1" 4
.IX Item "[ Member data: returns ib_net16_t * ] -pad1"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-lid1" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid1"
.IP "[ Member data: returns ib_net16_t * ] \-lid2" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid2"
.IP "[ Member data: returns ib_net32_t * ] \-key" 4
.IX Item "[ Member data: returns ib_net32_t * ] -key"
.IP "[ Member data: returns uint8_t * ] \-sl" 4
.IX Item "[ Member data: returns uint8_t * ] -sl"
.IP "[ Member data: returns ib_net32_t * ] \-qp1" 4
.IX Item "[ Member data: returns ib_net32_t * ] -qp1"
.IP "[ Member data: returns ib_net32_t * ] \-qp2" 4
.IX Item "[ Member data: returns ib_net32_t * ] -qp2"
.IP "[ Member data: returns ib_gid_t * ] \-gid1" 4
.IX Item "[ Member data: returns ib_gid_t * ] -gid1"
.IP "[ Member data: returns ib_gid_t * ] \-gid2" 4
.IX Item "[ Member data: returns ib_gid_t * ] -gid2"
.PD
\&\-\-\-\-
.Sp
\fIclass smNotice_data_details_ntc_259\fR
.IX Subsection "class smNotice_data_details_ntc_259"
.IP "[ Member data: returns ib_net16_t * ] \-data_valid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -data_valid"
.PD 0
.IP "[ Member data: returns ib_net16_t * ] \-lid1" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid1"
.IP "[ Member data: returns ib_net16_t * ] \-lid2" 4
.IX Item "[ Member data: returns ib_net16_t * ] -lid2"
.IP "[ Member data: returns ib_net32_t * ] \-key" 4
.IX Item "[ Member data: returns ib_net32_t * ] -key"
.IP "[ Member data: returns uint8_t * ] \-sl" 4
.IX Item "[ Member data: returns uint8_t * ] -sl"
.IP "[ Member data: returns ib_net32_t * ] \-qp1" 4
.IX Item "[ Member data: returns ib_net32_t * ] -qp1"
.IP "[ Member data: returns uint8_t * ] \-qp2_msb" 4
.IX Item "[ Member data: returns uint8_t * ] -qp2_msb"
.IP "[ Member data: returns ib_net16_t * ] \-qp2_lsb" 4
.IX Item "[ Member data: returns ib_net16_t * ] -qp2_lsb"
.IP "[ Member data: returns ib_gid_t * ] \-gid1" 4
.IX Item "[ Member data: returns ib_gid_t * ] -gid1"
.IP "[ Member data: returns ib_gid_t * ] \-gid2" 4
.IX Item "[ Member data: returns ib_gid_t * ] -gid2"
.IP "[ Member data: returns ib_net16_t * ] \-sw_lid" 4
.IX Item "[ Member data: returns ib_net16_t * ] -sw_lid"
.IP "[ Member data: returns uint8_t * ] \-port_no" 4
.IX Item "[ Member data: returns uint8_t * ] -port_no"
.PD
.SH "IBCR Functions"
.IX Header "IBCR Functions"
Provides vendor specific access to the device internal coniguration space
.Sp
This section provide the details about the functions \s-1IBCR\s0 exposes.
They all return 0 on succes.
.IP "[ returns int  ] crMultiMaxGet" 4
.IX Item "[ returns int  ] crMultiMaxGet"
.PD 0
.IP "[ returns int  ] crRead lid address" 4
.IX Item "[ returns int  ] crRead lid address"
.IP "[ returns int  ] crWrite lid data address" 4
.IX Item "[ returns int  ] crWrite lid data address"
.IP "[ returns int  ] crReadMulti num lid_list address" 4
.IX Item "[ returns int  ] crReadMulti num lid_list address"
.IP "[ returns int  ] crWriteMulti num lid_list data address" 4
.IX Item "[ returns int  ] crWriteMulti num lid_list data address"
.PD
.SH "IB Vendor Specific Functions"
.IX Header "IB Vendor Specific Functions"
\&\s-1IBVS\s0 stands for Vendor Specific MADs.
.Sp
This section provide the details about the functions \s-1IBVS\s0 exposes.
They all return 0 on succes.
.IP "[ returns int  ] vsMultiMaxGet" 4
.IX Item "[ returns int  ] vsMultiMaxGet"
.PD 0
.IP "[ returns int  ] vsCpuRead lid size cpu_traget_size address" 4
.IX Item "[ returns int  ] vsCpuRead lid size cpu_traget_size address"
.IP "[ returns int  ] vsCpuWrite lid size cpu_traget_size data address" 4
.IX Item "[ returns int  ] vsCpuWrite lid size cpu_traget_size data address"
.IP "[ returns int  ] vsI2cRead lid port_num device_id size address" 4
.IX Item "[ returns int  ] vsI2cRead lid port_num device_id size address"
.IP "[ returns int  ] vsI2cWrite lid port_num device_id size address data" 4
.IX Item "[ returns int  ] vsI2cWrite lid port_num device_id size address data"
.IP "[ returns int  ] vsI2cReadMulti num lid_list port_num device_id size address" 4
.IX Item "[ returns int  ] vsI2cReadMulti num lid_list port_num device_id size address"
.IP "[ returns int  ] vsI2cWriteMulti num lid_list port_num device_id size address data" 4
.IX Item "[ returns int  ] vsI2cWriteMulti num lid_list port_num device_id size address data"
.IP "[ returns int  ] vsGpioRead lid" 4
.IX Item "[ returns int  ] vsGpioRead lid"
.IP "[ returns int  ] vsGpioWrite lid gpio_mask gpio_data" 4
.IX Item "[ returns int  ] vsGpioWrite lid gpio_mask gpio_data"
.IP "[ returns int  ] vsSWReset num lid_list" 4
.IX Item "[ returns int  ] vsSWReset num lid_list"
.IP "[ returns int  ] vsFlashStartMulti num lid_list last size address data" 4
.IX Item "[ returns int  ] vsFlashStartMulti num lid_list last size address data"
.IP "[ returns int  ] vsFlashStopMulti num lid_list force" 4
.IX Item "[ returns int  ] vsFlashStopMulti num lid_list force"
.IP "[ returns int  ] vsFlashSetBankMulti num lid_list address" 4
.IX Item "[ returns int  ] vsFlashSetBankMulti num lid_list address"
.IP "[ returns int  ] vsFlashEraseSectorMulti num lid_list address" 4
.IX Item "[ returns int  ] vsFlashEraseSectorMulti num lid_list address"
.IP "[ returns int  ] vsFlashReadSectorMulti num lid_list size address" 4
.IX Item "[ returns int  ] vsFlashReadSectorMulti num lid_list size address"
.IP "[ returns int  ] vsFlashWriteSectorMulti num lid_list size address data" 4
.IX Item "[ returns int  ] vsFlashWriteSectorMulti num lid_list size address data"
.IP "[ returns int  ] vsMirrorRead lid" 4
.IX Item "[ returns int  ] vsMirrorRead lid"
.IP "[ returns int  ] vsMirrorWrite lid rx_mirror tx_mirror" 4
.IX Item "[ returns int  ] vsMirrorWrite lid rx_mirror tx_mirror"
.PD
.SH "IBBBM Functions"
.IX Header "IBBBM Functions"
This section provide the details about the functions \s-1IBBBM\s0 exposes.
They all return 0 on succes.
.IP "[ returns int  ] bbmVpdRead lid vpd_device_selector bytes_num offset" 4
.IX Item "[ returns int  ] bbmVpdRead lid vpd_device_selector bytes_num offset"
.PD 0
.IP "[ returns int  ] bbmVpdWrite lid vpd_device_selector bytes_num offset p_data" 4
.IX Item "[ returns int  ] bbmVpdWrite lid vpd_device_selector bytes_num offset p_data"
.IP "[ returns int  ] bbmVSDRead lid" 4
.IX Item "[ returns int  ] bbmVSDRead lid"
.IP "[ returns int  ] bbmBSNRead lid" 4
.IX Item "[ returns int  ] bbmBSNRead lid"
.IP "[ returns int  ] bbmModRead lid" 4
.IX Item "[ returns int  ] bbmModRead lid"
.IP "[ returns int  ] bbmChaRead lid" 4
.IX Item "[ returns int  ] bbmChaRead lid"
.IP "[ returns int  ] bbmFWVerRead lid" 4
.IX Item "[ returns int  ] bbmFWVerRead lid"
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Eitan Zahavi, Mellanox Technologies \s-1LTD\s0, eitan@mellanox.co.il
.\" Begin Sun update
.SH ATTRIBUTES
See
.BR attributes (5)
for descriptions of the following attributes:
.sp
.TS
box;
cbp-1 | cbp-1
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
Availability	network/open-fabrics
_
Interface Stability	Volatile
.TE 
.PP
.SH NOTES
Source for OFED is available from http://www.openfabrics.org/.
.\" End Sun update
